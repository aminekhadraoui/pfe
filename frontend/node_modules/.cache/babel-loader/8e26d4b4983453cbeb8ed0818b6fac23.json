{"ast":null,"code":"import { NativeImage } from \"./chunk-QBIO4VEB.mjs\";\nimport { shouldShowFallbackImage, useImage } from \"./chunk-HR33I6FK.mjs\"; // src/image.tsx\n\nimport { chakra, forwardRef } from \"@chakra-ui/system\"; // ../../utilities/object-utils/src/omit.ts\n\nfunction omit(object, keysToOmit = []) {\n  const clone = Object.assign({}, object);\n\n  for (const key of keysToOmit) {\n    if (key in clone) {\n      delete clone[key];\n    }\n  }\n\n  return clone;\n} // src/image.tsx\n\n\nimport { jsx } from \"react/jsx-runtime\";\nvar Image = forwardRef(function Image2(props, ref) {\n  const {\n    fallbackSrc,\n    fallback,\n    src,\n    srcSet,\n    align,\n    fit,\n    loading,\n    ignoreFallback,\n    crossOrigin,\n    fallbackStrategy = \"beforeLoadOrError\",\n    referrerPolicy,\n    ...rest\n  } = props;\n  const providedFallback = fallbackSrc !== void 0 || fallback !== void 0;\n  const shouldIgnoreFallbackImage = loading != null || ignoreFallback || !providedFallback;\n  const status = useImage({ ...props,\n    crossOrigin,\n    ignoreFallback: shouldIgnoreFallbackImage\n  });\n  const showFallbackImage = shouldShowFallbackImage(status, fallbackStrategy);\n  const shared = {\n    ref,\n    objectFit: fit,\n    objectPosition: align,\n    ...(shouldIgnoreFallbackImage ? rest : omit(rest, [\"onError\", \"onLoad\"]))\n  };\n\n  if (showFallbackImage) {\n    if (fallback) return fallback;\n    return /* @__PURE__ */jsx(chakra.img, {\n      as: NativeImage,\n      className: \"chakra-image__placeholder\",\n      src: fallbackSrc,\n      ...shared\n    });\n  }\n\n  return /* @__PURE__ */jsx(chakra.img, {\n    as: NativeImage,\n    src,\n    srcSet,\n    crossOrigin,\n    loading,\n    referrerPolicy,\n    className: \"chakra-image\",\n    ...shared\n  });\n});\nImage.displayName = \"Image\";\nexport { Image };","map":{"version":3,"sources":["C:/Users/HP/Desktop/pfe/node_modules/@chakra-ui/image/dist/chunk-SMHKDLMK.mjs"],"names":["NativeImage","shouldShowFallbackImage","useImage","chakra","forwardRef","omit","object","keysToOmit","clone","Object","assign","key","jsx","Image","Image2","props","ref","fallbackSrc","fallback","src","srcSet","align","fit","loading","ignoreFallback","crossOrigin","fallbackStrategy","referrerPolicy","rest","providedFallback","shouldIgnoreFallbackImage","status","showFallbackImage","shared","objectFit","objectPosition","img","as","className","displayName"],"mappings":"AAAA,SACEA,WADF,QAEO,sBAFP;AAGA,SACEC,uBADF,EAEEC,QAFF,QAGO,sBAHP,C,CAKA;;AACA,SACEC,MADF,EAEEC,UAFF,QAGO,mBAHP,C,CAKA;;AACA,SAASC,IAAT,CAAcC,MAAd,EAAsBC,UAAU,GAAG,EAAnC,EAAuC;AACrC,QAAMC,KAAK,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,MAAlB,CAAd;;AACA,OAAK,MAAMK,GAAX,IAAkBJ,UAAlB,EAA8B;AAC5B,QAAII,GAAG,IAAIH,KAAX,EAAkB;AAChB,aAAOA,KAAK,CAACG,GAAD,CAAZ;AACD;AACF;;AACD,SAAOH,KAAP;AACD,C,CAED;;;AACA,SAASI,GAAT,QAAoB,mBAApB;AACA,IAAIC,KAAK,GAAGT,UAAU,CAAC,SAASU,MAAT,CAAgBC,KAAhB,EAAuBC,GAAvB,EAA4B;AACjD,QAAM;AACJC,IAAAA,WADI;AAEJC,IAAAA,QAFI;AAGJC,IAAAA,GAHI;AAIJC,IAAAA,MAJI;AAKJC,IAAAA,KALI;AAMJC,IAAAA,GANI;AAOJC,IAAAA,OAPI;AAQJC,IAAAA,cARI;AASJC,IAAAA,WATI;AAUJC,IAAAA,gBAAgB,GAAG,mBAVf;AAWJC,IAAAA,cAXI;AAYJ,OAAGC;AAZC,MAaFb,KAbJ;AAcA,QAAMc,gBAAgB,GAAGZ,WAAW,KAAK,KAAK,CAArB,IAA0BC,QAAQ,KAAK,KAAK,CAArE;AACA,QAAMY,yBAAyB,GAAGP,OAAO,IAAI,IAAX,IAAmBC,cAAnB,IAAqC,CAACK,gBAAxE;AACA,QAAME,MAAM,GAAG7B,QAAQ,CAAC,EACtB,GAAGa,KADmB;AAEtBU,IAAAA,WAFsB;AAGtBD,IAAAA,cAAc,EAAEM;AAHM,GAAD,CAAvB;AAKA,QAAME,iBAAiB,GAAG/B,uBAAuB,CAAC8B,MAAD,EAASL,gBAAT,CAAjD;AACA,QAAMO,MAAM,GAAG;AACbjB,IAAAA,GADa;AAEbkB,IAAAA,SAAS,EAAEZ,GAFE;AAGba,IAAAA,cAAc,EAAEd,KAHH;AAIb,QAAGS,yBAAyB,GAAGF,IAAH,GAAUvB,IAAI,CAACuB,IAAD,EAAO,CAAC,SAAD,EAAY,QAAZ,CAAP,CAA1C;AAJa,GAAf;;AAMA,MAAII,iBAAJ,EAAuB;AACrB,QAAId,QAAJ,EACE,OAAOA,QAAP;AACF,WAAO,eAAgBN,GAAG,CACxBT,MAAM,CAACiC,GADiB,EAExB;AACEC,MAAAA,EAAE,EAAErC,WADN;AAEEsC,MAAAA,SAAS,EAAE,2BAFb;AAGEnB,MAAAA,GAAG,EAAEF,WAHP;AAIE,SAAGgB;AAJL,KAFwB,CAA1B;AASD;;AACD,SAAO,eAAgBrB,GAAG,CACxBT,MAAM,CAACiC,GADiB,EAExB;AACEC,IAAAA,EAAE,EAAErC,WADN;AAEEmB,IAAAA,GAFF;AAGEC,IAAAA,MAHF;AAIEK,IAAAA,WAJF;AAKEF,IAAAA,OALF;AAMEI,IAAAA,cANF;AAOEW,IAAAA,SAAS,EAAE,cAPb;AAQE,OAAGL;AARL,GAFwB,CAA1B;AAaD,CAvDqB,CAAtB;AAwDApB,KAAK,CAAC0B,WAAN,GAAoB,OAApB;AAEA,SACE1B,KADF","sourcesContent":["import {\n  NativeImage\n} from \"./chunk-QBIO4VEB.mjs\";\nimport {\n  shouldShowFallbackImage,\n  useImage\n} from \"./chunk-HR33I6FK.mjs\";\n\n// src/image.tsx\nimport {\n  chakra,\n  forwardRef\n} from \"@chakra-ui/system\";\n\n// ../../utilities/object-utils/src/omit.ts\nfunction omit(object, keysToOmit = []) {\n  const clone = Object.assign({}, object);\n  for (const key of keysToOmit) {\n    if (key in clone) {\n      delete clone[key];\n    }\n  }\n  return clone;\n}\n\n// src/image.tsx\nimport { jsx } from \"react/jsx-runtime\";\nvar Image = forwardRef(function Image2(props, ref) {\n  const {\n    fallbackSrc,\n    fallback,\n    src,\n    srcSet,\n    align,\n    fit,\n    loading,\n    ignoreFallback,\n    crossOrigin,\n    fallbackStrategy = \"beforeLoadOrError\",\n    referrerPolicy,\n    ...rest\n  } = props;\n  const providedFallback = fallbackSrc !== void 0 || fallback !== void 0;\n  const shouldIgnoreFallbackImage = loading != null || ignoreFallback || !providedFallback;\n  const status = useImage({\n    ...props,\n    crossOrigin,\n    ignoreFallback: shouldIgnoreFallbackImage\n  });\n  const showFallbackImage = shouldShowFallbackImage(status, fallbackStrategy);\n  const shared = {\n    ref,\n    objectFit: fit,\n    objectPosition: align,\n    ...shouldIgnoreFallbackImage ? rest : omit(rest, [\"onError\", \"onLoad\"])\n  };\n  if (showFallbackImage) {\n    if (fallback)\n      return fallback;\n    return /* @__PURE__ */ jsx(\n      chakra.img,\n      {\n        as: NativeImage,\n        className: \"chakra-image__placeholder\",\n        src: fallbackSrc,\n        ...shared\n      }\n    );\n  }\n  return /* @__PURE__ */ jsx(\n    chakra.img,\n    {\n      as: NativeImage,\n      src,\n      srcSet,\n      crossOrigin,\n      loading,\n      referrerPolicy,\n      className: \"chakra-image\",\n      ...shared\n    }\n  );\n});\nImage.displayName = \"Image\";\n\nexport {\n  Image\n};\n"]},"metadata":{},"sourceType":"module"}