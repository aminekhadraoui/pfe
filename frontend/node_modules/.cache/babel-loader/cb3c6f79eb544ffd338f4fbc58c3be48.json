{"ast":null,"code":"// src/index.ts\nimport { useMemo, useState } from \"react\";\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\n\nfunction useControllableProp(prop, state) {\n  const controlled = typeof prop !== \"undefined\";\n  const value = controlled ? prop : state;\n  return useMemo(() => [controlled, value], [controlled, value]);\n}\n\nfunction useControllableState(props) {\n  const {\n    value: valueProp,\n    defaultValue,\n    onChange,\n    shouldUpdate = (prev, next) => prev !== next\n  } = props;\n  const onChangeProp = useCallbackRef(onChange);\n  const shouldUpdateProp = useCallbackRef(shouldUpdate);\n  const [uncontrolledState, setUncontrolledState] = useState(defaultValue);\n  const controlled = valueProp !== void 0;\n  const value = controlled ? valueProp : uncontrolledState;\n  const setValue = useCallbackRef(next => {\n    const setter = next;\n    const nextValue = typeof next === \"function\" ? setter(value) : next;\n\n    if (!shouldUpdateProp(value, nextValue)) {\n      return;\n    }\n\n    if (!controlled) {\n      setUncontrolledState(nextValue);\n    }\n\n    onChangeProp(nextValue);\n  }, [controlled, onChangeProp, value, shouldUpdateProp]);\n  return [value, setValue];\n}\n\nexport { useControllableProp, useControllableState };","map":{"version":3,"sources":["C:/Users/HP/Desktop/pfe/node_modules/@chakra-ui/react-use-controllable-state/dist/index.mjs"],"names":["useMemo","useState","useCallbackRef","useControllableProp","prop","state","controlled","value","useControllableState","props","valueProp","defaultValue","onChange","shouldUpdate","prev","next","onChangeProp","shouldUpdateProp","uncontrolledState","setUncontrolledState","setValue","setter","nextValue"],"mappings":"AAAA;AACA,SAASA,OAAT,EAAkBC,QAAlB,QAAkC,OAAlC;AACA,SAASC,cAAT,QAA+B,mCAA/B;;AACA,SAASC,mBAAT,CAA6BC,IAA7B,EAAmCC,KAAnC,EAA0C;AACxC,QAAMC,UAAU,GAAG,OAAOF,IAAP,KAAgB,WAAnC;AACA,QAAMG,KAAK,GAAGD,UAAU,GAAGF,IAAH,GAAUC,KAAlC;AACA,SAAOL,OAAO,CAAC,MAAM,CAACM,UAAD,EAAaC,KAAb,CAAP,EAA4B,CAACD,UAAD,EAAaC,KAAb,CAA5B,CAAd;AACD;;AACD,SAASC,oBAAT,CAA8BC,KAA9B,EAAqC;AACnC,QAAM;AACJF,IAAAA,KAAK,EAAEG,SADH;AAEJC,IAAAA,YAFI;AAGJC,IAAAA,QAHI;AAIJC,IAAAA,YAAY,GAAG,CAACC,IAAD,EAAOC,IAAP,KAAgBD,IAAI,KAAKC;AAJpC,MAKFN,KALJ;AAMA,QAAMO,YAAY,GAAGd,cAAc,CAACU,QAAD,CAAnC;AACA,QAAMK,gBAAgB,GAAGf,cAAc,CAACW,YAAD,CAAvC;AACA,QAAM,CAACK,iBAAD,EAAoBC,oBAApB,IAA4ClB,QAAQ,CAACU,YAAD,CAA1D;AACA,QAAML,UAAU,GAAGI,SAAS,KAAK,KAAK,CAAtC;AACA,QAAMH,KAAK,GAAGD,UAAU,GAAGI,SAAH,GAAeQ,iBAAvC;AACA,QAAME,QAAQ,GAAGlB,cAAc,CAC5Ba,IAAD,IAAU;AACR,UAAMM,MAAM,GAAGN,IAAf;AACA,UAAMO,SAAS,GAAG,OAAOP,IAAP,KAAgB,UAAhB,GAA6BM,MAAM,CAACd,KAAD,CAAnC,GAA6CQ,IAA/D;;AACA,QAAI,CAACE,gBAAgB,CAACV,KAAD,EAAQe,SAAR,CAArB,EAAyC;AACvC;AACD;;AACD,QAAI,CAAChB,UAAL,EAAiB;AACfa,MAAAA,oBAAoB,CAACG,SAAD,CAApB;AACD;;AACDN,IAAAA,YAAY,CAACM,SAAD,CAAZ;AACD,GAX4B,EAY7B,CAAChB,UAAD,EAAaU,YAAb,EAA2BT,KAA3B,EAAkCU,gBAAlC,CAZ6B,CAA/B;AAcA,SAAO,CAACV,KAAD,EAAQa,QAAR,CAAP;AACD;;AACD,SACEjB,mBADF,EAEEK,oBAFF","sourcesContent":["// src/index.ts\nimport { useMemo, useState } from \"react\";\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nfunction useControllableProp(prop, state) {\n  const controlled = typeof prop !== \"undefined\";\n  const value = controlled ? prop : state;\n  return useMemo(() => [controlled, value], [controlled, value]);\n}\nfunction useControllableState(props) {\n  const {\n    value: valueProp,\n    defaultValue,\n    onChange,\n    shouldUpdate = (prev, next) => prev !== next\n  } = props;\n  const onChangeProp = useCallbackRef(onChange);\n  const shouldUpdateProp = useCallbackRef(shouldUpdate);\n  const [uncontrolledState, setUncontrolledState] = useState(defaultValue);\n  const controlled = valueProp !== void 0;\n  const value = controlled ? valueProp : uncontrolledState;\n  const setValue = useCallbackRef(\n    (next) => {\n      const setter = next;\n      const nextValue = typeof next === \"function\" ? setter(value) : next;\n      if (!shouldUpdateProp(value, nextValue)) {\n        return;\n      }\n      if (!controlled) {\n        setUncontrolledState(nextValue);\n      }\n      onChangeProp(nextValue);\n    },\n    [controlled, onChangeProp, value, shouldUpdateProp]\n  );\n  return [value, setValue];\n}\nexport {\n  useControllableProp,\n  useControllableState\n};\n"]},"metadata":{},"sourceType":"module"}