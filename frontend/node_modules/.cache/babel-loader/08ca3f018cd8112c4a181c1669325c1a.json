{"ast":null,"code":"// src/index.ts\nimport { useMemo } from \"react\";\n\nfunction assignRef(ref, value) {\n  if (ref == null) return;\n\n  if (typeof ref === \"function\") {\n    ref(value);\n    return;\n  }\n\n  try {\n    ref.current = value;\n  } catch (error) {\n    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`);\n  }\n}\n\nfunction mergeRefs(...refs) {\n  return node => {\n    refs.forEach(ref => {\n      assignRef(ref, node);\n    });\n  };\n}\n\nfunction useMergeRefs(...refs) {\n  return useMemo(() => mergeRefs(...refs), refs);\n}\n\nexport { assignRef, mergeRefs, useMergeRefs };","map":{"version":3,"sources":["C:/Users/HP/Desktop/pfe/node_modules/@chakra-ui/react-use-merge-refs/dist/index.mjs"],"names":["useMemo","assignRef","ref","value","current","error","Error","mergeRefs","refs","node","forEach","useMergeRefs"],"mappings":"AAAA;AACA,SAASA,OAAT,QAAwB,OAAxB;;AACA,SAASC,SAAT,CAAmBC,GAAnB,EAAwBC,KAAxB,EAA+B;AAC7B,MAAID,GAAG,IAAI,IAAX,EACE;;AACF,MAAI,OAAOA,GAAP,KAAe,UAAnB,EAA+B;AAC7BA,IAAAA,GAAG,CAACC,KAAD,CAAH;AACA;AACD;;AACD,MAAI;AACFD,IAAAA,GAAG,CAACE,OAAJ,GAAcD,KAAd;AACD,GAFD,CAEE,OAAOE,KAAP,EAAc;AACd,UAAM,IAAIC,KAAJ,CAAW,wBAAuBH,KAAM,aAAYD,GAAI,GAAxD,CAAN;AACD;AACF;;AACD,SAASK,SAAT,CAAmB,GAAGC,IAAtB,EAA4B;AAC1B,SAAQC,IAAD,IAAU;AACfD,IAAAA,IAAI,CAACE,OAAL,CAAcR,GAAD,IAAS;AACpBD,MAAAA,SAAS,CAACC,GAAD,EAAMO,IAAN,CAAT;AACD,KAFD;AAGD,GAJD;AAKD;;AACD,SAASE,YAAT,CAAsB,GAAGH,IAAzB,EAA+B;AAC7B,SAAOR,OAAO,CAAC,MAAMO,SAAS,CAAC,GAAGC,IAAJ,CAAhB,EAA2BA,IAA3B,CAAd;AACD;;AACD,SACEP,SADF,EAEEM,SAFF,EAGEI,YAHF","sourcesContent":["// src/index.ts\nimport { useMemo } from \"react\";\nfunction assignRef(ref, value) {\n  if (ref == null)\n    return;\n  if (typeof ref === \"function\") {\n    ref(value);\n    return;\n  }\n  try {\n    ref.current = value;\n  } catch (error) {\n    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`);\n  }\n}\nfunction mergeRefs(...refs) {\n  return (node) => {\n    refs.forEach((ref) => {\n      assignRef(ref, node);\n    });\n  };\n}\nfunction useMergeRefs(...refs) {\n  return useMemo(() => mergeRefs(...refs), refs);\n}\nexport {\n  assignRef,\n  mergeRefs,\n  useMergeRefs\n};\n"]},"metadata":{},"sourceType":"module"}