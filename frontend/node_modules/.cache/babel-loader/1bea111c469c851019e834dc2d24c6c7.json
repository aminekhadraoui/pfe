{"ast":null,"code":"import { ColorModeContext } from \"./chunk-7NLW6UB6.mjs\";\nimport { getColorModeUtils } from \"./chunk-QTTMAIIW.mjs\";\nimport { localStorageManager } from \"./chunk-BWTZURQV.mjs\"; // src/color-mode-provider.tsx\n\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\n\nvar noop = () => {};\n\nfunction getTheme(manager, fallback) {\n  return manager.type === \"cookie\" && manager.ssr ? manager.get(fallback) : fallback;\n}\n\nfunction ColorModeProvider(props) {\n  const {\n    value,\n    children,\n    options: {\n      useSystemColorMode,\n      initialColorMode,\n      disableTransitionOnChange\n    } = {},\n    colorModeManager = localStorageManager\n  } = props;\n  const defaultColorMode = initialColorMode === \"dark\" ? \"dark\" : \"light\";\n  const [colorMode, rawSetColorMode] = useState(() => getTheme(colorModeManager, defaultColorMode));\n  const [resolvedColorMode, setResolvedColorMode] = useState(() => getTheme(colorModeManager));\n  const {\n    getSystemTheme,\n    setClassName,\n    setDataset,\n    addListener\n  } = useMemo(() => getColorModeUtils({\n    preventTransition: disableTransitionOnChange\n  }), [disableTransitionOnChange]);\n  const resolvedValue = initialColorMode === \"system\" && !colorMode ? resolvedColorMode : colorMode;\n  const setColorMode = useCallback(value2 => {\n    const resolved = value2 === \"system\" ? getSystemTheme() : value2;\n    rawSetColorMode(resolved);\n    setClassName(resolved === \"dark\");\n    setDataset(resolved);\n    colorModeManager.set(resolved);\n  }, [colorModeManager, getSystemTheme, setClassName, setDataset]);\n  useSafeLayoutEffect(() => {\n    if (initialColorMode === \"system\") {\n      setResolvedColorMode(getSystemTheme());\n    }\n  }, []);\n  useEffect(() => {\n    const managerValue = colorModeManager.get();\n\n    if (managerValue) {\n      setColorMode(managerValue);\n      return;\n    }\n\n    if (initialColorMode === \"system\") {\n      setColorMode(\"system\");\n      return;\n    }\n\n    setColorMode(defaultColorMode);\n  }, [colorModeManager, defaultColorMode, initialColorMode, setColorMode]);\n  const toggleColorMode = useCallback(() => {\n    setColorMode(resolvedValue === \"dark\" ? \"light\" : \"dark\");\n  }, [resolvedValue, setColorMode]);\n  useEffect(() => {\n    if (!useSystemColorMode) return;\n    return addListener(setColorMode);\n  }, [useSystemColorMode, addListener, setColorMode]);\n  const context = useMemo(() => ({\n    colorMode: value != null ? value : resolvedValue,\n    toggleColorMode: value ? noop : toggleColorMode,\n    setColorMode: value ? noop : setColorMode,\n    forced: value !== void 0\n  }), [resolvedValue, toggleColorMode, setColorMode, value]);\n  return /* @__PURE__ */jsx(ColorModeContext.Provider, {\n    value: context,\n    children\n  });\n}\n\nColorModeProvider.displayName = \"ColorModeProvider\";\n\nfunction DarkMode(props) {\n  const context = useMemo(() => ({\n    colorMode: \"dark\",\n    toggleColorMode: noop,\n    setColorMode: noop,\n    forced: true\n  }), []);\n  return /* @__PURE__ */jsx(ColorModeContext.Provider, {\n    value: context,\n    ...props\n  });\n}\n\nDarkMode.displayName = \"DarkMode\";\n\nfunction LightMode(props) {\n  const context = useMemo(() => ({\n    colorMode: \"light\",\n    toggleColorMode: noop,\n    setColorMode: noop,\n    forced: true\n  }), []);\n  return /* @__PURE__ */jsx(ColorModeContext.Provider, {\n    value: context,\n    ...props\n  });\n}\n\nLightMode.displayName = \"LightMode\";\nexport { ColorModeProvider, DarkMode, LightMode };","map":{"version":3,"sources":["C:/Users/HP/Desktop/pfe/node_modules/@chakra-ui/color-mode/dist/chunk-4DEUOPYU.mjs"],"names":["ColorModeContext","getColorModeUtils","localStorageManager","useSafeLayoutEffect","useCallback","useEffect","useMemo","useState","jsx","noop","getTheme","manager","fallback","type","ssr","get","ColorModeProvider","props","value","children","options","useSystemColorMode","initialColorMode","disableTransitionOnChange","colorModeManager","defaultColorMode","colorMode","rawSetColorMode","resolvedColorMode","setResolvedColorMode","getSystemTheme","setClassName","setDataset","addListener","preventTransition","resolvedValue","setColorMode","value2","resolved","set","managerValue","toggleColorMode","context","forced","Provider","displayName","DarkMode","LightMode"],"mappings":"AAAA,SACEA,gBADF,QAEO,sBAFP;AAGA,SACEC,iBADF,QAEO,sBAFP;AAGA,SACEC,mBADF,QAEO,sBAFP,C,CAIA;;AACA,SAASC,mBAAT,QAAoC,yCAApC;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,OAAjC,EAA0CC,QAA1C,QAA0D,OAA1D;AACA,SAASC,GAAT,QAAoB,mBAApB;;AACA,IAAIC,IAAI,GAAG,MAAM,CAChB,CADD;;AAEA,SAASC,QAAT,CAAkBC,OAAlB,EAA2BC,QAA3B,EAAqC;AACnC,SAAOD,OAAO,CAACE,IAAR,KAAiB,QAAjB,IAA6BF,OAAO,CAACG,GAArC,GAA2CH,OAAO,CAACI,GAAR,CAAYH,QAAZ,CAA3C,GAAmEA,QAA1E;AACD;;AACD,SAASI,iBAAT,CAA2BC,KAA3B,EAAkC;AAChC,QAAM;AACJC,IAAAA,KADI;AAEJC,IAAAA,QAFI;AAGJC,IAAAA,OAAO,EAAE;AACPC,MAAAA,kBADO;AAEPC,MAAAA,gBAFO;AAGPC,MAAAA;AAHO,QAIL,EAPA;AAQJC,IAAAA,gBAAgB,GAAGtB;AARf,MASFe,KATJ;AAUA,QAAMQ,gBAAgB,GAAGH,gBAAgB,KAAK,MAArB,GAA8B,MAA9B,GAAuC,OAAhE;AACA,QAAM,CAACI,SAAD,EAAYC,eAAZ,IAA+BpB,QAAQ,CAC3C,MAAMG,QAAQ,CAACc,gBAAD,EAAmBC,gBAAnB,CAD6B,CAA7C;AAGA,QAAM,CAACG,iBAAD,EAAoBC,oBAApB,IAA4CtB,QAAQ,CACxD,MAAMG,QAAQ,CAACc,gBAAD,CAD0C,CAA1D;AAGA,QAAM;AAAEM,IAAAA,cAAF;AAAkBC,IAAAA,YAAlB;AAAgCC,IAAAA,UAAhC;AAA4CC,IAAAA;AAA5C,MAA4D3B,OAAO,CACvE,MAAML,iBAAiB,CAAC;AAAEiC,IAAAA,iBAAiB,EAAEX;AAArB,GAAD,CADgD,EAEvE,CAACA,yBAAD,CAFuE,CAAzE;AAIA,QAAMY,aAAa,GAAGb,gBAAgB,KAAK,QAArB,IAAiC,CAACI,SAAlC,GAA8CE,iBAA9C,GAAkEF,SAAxF;AACA,QAAMU,YAAY,GAAGhC,WAAW,CAC7BiC,MAAD,IAAY;AACV,UAAMC,QAAQ,GAAGD,MAAM,KAAK,QAAX,GAAsBP,cAAc,EAApC,GAAyCO,MAA1D;AACAV,IAAAA,eAAe,CAACW,QAAD,CAAf;AACAP,IAAAA,YAAY,CAACO,QAAQ,KAAK,MAAd,CAAZ;AACAN,IAAAA,UAAU,CAACM,QAAD,CAAV;AACAd,IAAAA,gBAAgB,CAACe,GAAjB,CAAqBD,QAArB;AACD,GAP6B,EAQ9B,CAACd,gBAAD,EAAmBM,cAAnB,EAAmCC,YAAnC,EAAiDC,UAAjD,CAR8B,CAAhC;AAUA7B,EAAAA,mBAAmB,CAAC,MAAM;AACxB,QAAImB,gBAAgB,KAAK,QAAzB,EAAmC;AACjCO,MAAAA,oBAAoB,CAACC,cAAc,EAAf,CAApB;AACD;AACF,GAJkB,EAIhB,EAJgB,CAAnB;AAKAzB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMmC,YAAY,GAAGhB,gBAAgB,CAACT,GAAjB,EAArB;;AACA,QAAIyB,YAAJ,EAAkB;AAChBJ,MAAAA,YAAY,CAACI,YAAD,CAAZ;AACA;AACD;;AACD,QAAIlB,gBAAgB,KAAK,QAAzB,EAAmC;AACjCc,MAAAA,YAAY,CAAC,QAAD,CAAZ;AACA;AACD;;AACDA,IAAAA,YAAY,CAACX,gBAAD,CAAZ;AACD,GAXQ,EAWN,CAACD,gBAAD,EAAmBC,gBAAnB,EAAqCH,gBAArC,EAAuDc,YAAvD,CAXM,CAAT;AAYA,QAAMK,eAAe,GAAGrC,WAAW,CAAC,MAAM;AACxCgC,IAAAA,YAAY,CAACD,aAAa,KAAK,MAAlB,GAA2B,OAA3B,GAAqC,MAAtC,CAAZ;AACD,GAFkC,EAEhC,CAACA,aAAD,EAAgBC,YAAhB,CAFgC,CAAnC;AAGA/B,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACgB,kBAAL,EACE;AACF,WAAOY,WAAW,CAACG,YAAD,CAAlB;AACD,GAJQ,EAIN,CAACf,kBAAD,EAAqBY,WAArB,EAAkCG,YAAlC,CAJM,CAAT;AAKA,QAAMM,OAAO,GAAGpC,OAAO,CACrB,OAAO;AACLoB,IAAAA,SAAS,EAAER,KAAK,IAAI,IAAT,GAAgBA,KAAhB,GAAwBiB,aAD9B;AAELM,IAAAA,eAAe,EAAEvB,KAAK,GAAGT,IAAH,GAAUgC,eAF3B;AAGLL,IAAAA,YAAY,EAAElB,KAAK,GAAGT,IAAH,GAAU2B,YAHxB;AAILO,IAAAA,MAAM,EAAEzB,KAAK,KAAK,KAAK;AAJlB,GAAP,CADqB,EAOrB,CAACiB,aAAD,EAAgBM,eAAhB,EAAiCL,YAAjC,EAA+ClB,KAA/C,CAPqB,CAAvB;AASA,SAAO,eAAgBV,GAAG,CAACR,gBAAgB,CAAC4C,QAAlB,EAA4B;AAAE1B,IAAAA,KAAK,EAAEwB,OAAT;AAAkBvB,IAAAA;AAAlB,GAA5B,CAA1B;AACD;;AACDH,iBAAiB,CAAC6B,WAAlB,GAAgC,mBAAhC;;AACA,SAASC,QAAT,CAAkB7B,KAAlB,EAAyB;AACvB,QAAMyB,OAAO,GAAGpC,OAAO,CACrB,OAAO;AACLoB,IAAAA,SAAS,EAAE,MADN;AAELe,IAAAA,eAAe,EAAEhC,IAFZ;AAGL2B,IAAAA,YAAY,EAAE3B,IAHT;AAILkC,IAAAA,MAAM,EAAE;AAJH,GAAP,CADqB,EAOrB,EAPqB,CAAvB;AASA,SAAO,eAAgBnC,GAAG,CAACR,gBAAgB,CAAC4C,QAAlB,EAA4B;AAAE1B,IAAAA,KAAK,EAAEwB,OAAT;AAAkB,OAAGzB;AAArB,GAA5B,CAA1B;AACD;;AACD6B,QAAQ,CAACD,WAAT,GAAuB,UAAvB;;AACA,SAASE,SAAT,CAAmB9B,KAAnB,EAA0B;AACxB,QAAMyB,OAAO,GAAGpC,OAAO,CACrB,OAAO;AACLoB,IAAAA,SAAS,EAAE,OADN;AAELe,IAAAA,eAAe,EAAEhC,IAFZ;AAGL2B,IAAAA,YAAY,EAAE3B,IAHT;AAILkC,IAAAA,MAAM,EAAE;AAJH,GAAP,CADqB,EAOrB,EAPqB,CAAvB;AASA,SAAO,eAAgBnC,GAAG,CAACR,gBAAgB,CAAC4C,QAAlB,EAA4B;AAAE1B,IAAAA,KAAK,EAAEwB,OAAT;AAAkB,OAAGzB;AAArB,GAA5B,CAA1B;AACD;;AACD8B,SAAS,CAACF,WAAV,GAAwB,WAAxB;AAEA,SACE7B,iBADF,EAEE8B,QAFF,EAGEC,SAHF","sourcesContent":["import {\n  ColorModeContext\n} from \"./chunk-7NLW6UB6.mjs\";\nimport {\n  getColorModeUtils\n} from \"./chunk-QTTMAIIW.mjs\";\nimport {\n  localStorageManager\n} from \"./chunk-BWTZURQV.mjs\";\n\n// src/color-mode-provider.tsx\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar noop = () => {\n};\nfunction getTheme(manager, fallback) {\n  return manager.type === \"cookie\" && manager.ssr ? manager.get(fallback) : fallback;\n}\nfunction ColorModeProvider(props) {\n  const {\n    value,\n    children,\n    options: {\n      useSystemColorMode,\n      initialColorMode,\n      disableTransitionOnChange\n    } = {},\n    colorModeManager = localStorageManager\n  } = props;\n  const defaultColorMode = initialColorMode === \"dark\" ? \"dark\" : \"light\";\n  const [colorMode, rawSetColorMode] = useState(\n    () => getTheme(colorModeManager, defaultColorMode)\n  );\n  const [resolvedColorMode, setResolvedColorMode] = useState(\n    () => getTheme(colorModeManager)\n  );\n  const { getSystemTheme, setClassName, setDataset, addListener } = useMemo(\n    () => getColorModeUtils({ preventTransition: disableTransitionOnChange }),\n    [disableTransitionOnChange]\n  );\n  const resolvedValue = initialColorMode === \"system\" && !colorMode ? resolvedColorMode : colorMode;\n  const setColorMode = useCallback(\n    (value2) => {\n      const resolved = value2 === \"system\" ? getSystemTheme() : value2;\n      rawSetColorMode(resolved);\n      setClassName(resolved === \"dark\");\n      setDataset(resolved);\n      colorModeManager.set(resolved);\n    },\n    [colorModeManager, getSystemTheme, setClassName, setDataset]\n  );\n  useSafeLayoutEffect(() => {\n    if (initialColorMode === \"system\") {\n      setResolvedColorMode(getSystemTheme());\n    }\n  }, []);\n  useEffect(() => {\n    const managerValue = colorModeManager.get();\n    if (managerValue) {\n      setColorMode(managerValue);\n      return;\n    }\n    if (initialColorMode === \"system\") {\n      setColorMode(\"system\");\n      return;\n    }\n    setColorMode(defaultColorMode);\n  }, [colorModeManager, defaultColorMode, initialColorMode, setColorMode]);\n  const toggleColorMode = useCallback(() => {\n    setColorMode(resolvedValue === \"dark\" ? \"light\" : \"dark\");\n  }, [resolvedValue, setColorMode]);\n  useEffect(() => {\n    if (!useSystemColorMode)\n      return;\n    return addListener(setColorMode);\n  }, [useSystemColorMode, addListener, setColorMode]);\n  const context = useMemo(\n    () => ({\n      colorMode: value != null ? value : resolvedValue,\n      toggleColorMode: value ? noop : toggleColorMode,\n      setColorMode: value ? noop : setColorMode,\n      forced: value !== void 0\n    }),\n    [resolvedValue, toggleColorMode, setColorMode, value]\n  );\n  return /* @__PURE__ */ jsx(ColorModeContext.Provider, { value: context, children });\n}\nColorModeProvider.displayName = \"ColorModeProvider\";\nfunction DarkMode(props) {\n  const context = useMemo(\n    () => ({\n      colorMode: \"dark\",\n      toggleColorMode: noop,\n      setColorMode: noop,\n      forced: true\n    }),\n    []\n  );\n  return /* @__PURE__ */ jsx(ColorModeContext.Provider, { value: context, ...props });\n}\nDarkMode.displayName = \"DarkMode\";\nfunction LightMode(props) {\n  const context = useMemo(\n    () => ({\n      colorMode: \"light\",\n      toggleColorMode: noop,\n      setColorMode: noop,\n      forced: true\n    }),\n    []\n  );\n  return /* @__PURE__ */ jsx(ColorModeContext.Provider, { value: context, ...props });\n}\nLightMode.displayName = \"LightMode\";\n\nexport {\n  ColorModeProvider,\n  DarkMode,\n  LightMode\n};\n"]},"metadata":{},"sourceType":"module"}