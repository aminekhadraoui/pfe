{"ast":null,"code":"// src/index.ts\nimport { useEffect, useState } from \"react\";\nimport { useEventListener } from \"@chakra-ui/react-use-event-listener\";\nimport { getOwnerWindow } from \"@chakra-ui/dom-utils\";\n\nfunction useAnimationState(props) {\n  const {\n    isOpen,\n    ref\n  } = props;\n  const [mounted, setMounted] = useState(isOpen);\n  const [once, setOnce] = useState(false);\n  useEffect(() => {\n    if (!once) {\n      setMounted(isOpen);\n      setOnce(true);\n    }\n  }, [isOpen, once, mounted]);\n  useEventListener(() => ref.current, \"animationend\", () => {\n    setMounted(isOpen);\n  });\n  const hidden = isOpen ? false : !mounted;\n  return {\n    present: !hidden,\n\n    onComplete() {\n      var _a;\n\n      const win = getOwnerWindow(ref.current);\n      const evt = new win.CustomEvent(\"animationend\", {\n        bubbles: true\n      });\n      (_a = ref.current) == null ? void 0 : _a.dispatchEvent(evt);\n    }\n\n  };\n}\n\nexport { useAnimationState };","map":{"version":3,"sources":["C:/Users/HP/Desktop/pfe/node_modules/@chakra-ui/react-use-animation-state/dist/index.mjs"],"names":["useEffect","useState","useEventListener","getOwnerWindow","useAnimationState","props","isOpen","ref","mounted","setMounted","once","setOnce","current","hidden","present","onComplete","_a","win","evt","CustomEvent","bubbles","dispatchEvent"],"mappings":"AAAA;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,gBAAT,QAAiC,qCAAjC;AACA,SAASC,cAAT,QAA+B,sBAA/B;;AACA,SAASC,iBAAT,CAA2BC,KAA3B,EAAkC;AAChC,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAkBF,KAAxB;AACA,QAAM,CAACG,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAACK,MAAD,CAAtC;AACA,QAAM,CAACI,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,KAAD,CAAhC;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACU,IAAL,EAAW;AACTD,MAAAA,UAAU,CAACH,MAAD,CAAV;AACAK,MAAAA,OAAO,CAAC,IAAD,CAAP;AACD;AACF,GALQ,EAKN,CAACL,MAAD,EAASI,IAAT,EAAeF,OAAf,CALM,CAAT;AAMAN,EAAAA,gBAAgB,CACd,MAAMK,GAAG,CAACK,OADI,EAEd,cAFc,EAGd,MAAM;AACJH,IAAAA,UAAU,CAACH,MAAD,CAAV;AACD,GALa,CAAhB;AAOA,QAAMO,MAAM,GAAGP,MAAM,GAAG,KAAH,GAAW,CAACE,OAAjC;AACA,SAAO;AACLM,IAAAA,OAAO,EAAE,CAACD,MADL;;AAELE,IAAAA,UAAU,GAAG;AACX,UAAIC,EAAJ;;AACA,YAAMC,GAAG,GAAGd,cAAc,CAACI,GAAG,CAACK,OAAL,CAA1B;AACA,YAAMM,GAAG,GAAG,IAAID,GAAG,CAACE,WAAR,CAAoB,cAApB,EAAoC;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAApC,CAAZ;AACA,OAACJ,EAAE,GAAGT,GAAG,CAACK,OAAV,KAAsB,IAAtB,GAA6B,KAAK,CAAlC,GAAsCI,EAAE,CAACK,aAAH,CAAiBH,GAAjB,CAAtC;AACD;;AAPI,GAAP;AASD;;AACD,SACEd,iBADF","sourcesContent":["// src/index.ts\nimport { useEffect, useState } from \"react\";\nimport { useEventListener } from \"@chakra-ui/react-use-event-listener\";\nimport { getOwnerWindow } from \"@chakra-ui/dom-utils\";\nfunction useAnimationState(props) {\n  const { isOpen, ref } = props;\n  const [mounted, setMounted] = useState(isOpen);\n  const [once, setOnce] = useState(false);\n  useEffect(() => {\n    if (!once) {\n      setMounted(isOpen);\n      setOnce(true);\n    }\n  }, [isOpen, once, mounted]);\n  useEventListener(\n    () => ref.current,\n    \"animationend\",\n    () => {\n      setMounted(isOpen);\n    }\n  );\n  const hidden = isOpen ? false : !mounted;\n  return {\n    present: !hidden,\n    onComplete() {\n      var _a;\n      const win = getOwnerWindow(ref.current);\n      const evt = new win.CustomEvent(\"animationend\", { bubbles: true });\n      (_a = ref.current) == null ? void 0 : _a.dispatchEvent(evt);\n    }\n  };\n}\nexport {\n  useAnimationState\n};\n"]},"metadata":{},"sourceType":"module"}