{"ast":null,"code":"import { fromEntries } from \"./chunk-YTQ3XZ3T.mjs\";\nimport { isArray, isObject } from \"./chunk-Y5FGD7DM.mjs\"; // src/walk-object.ts\n\nfunction walkObject(target, predicate) {\n  function inner(value, path = []) {\n    if (isArray(value)) {\n      return value.map((item, index) => inner(item, [...path, String(index)]));\n    }\n\n    if (isObject(value)) {\n      return fromEntries(Object.entries(value).map(([key, child]) => [key, inner(child, [...path, key])]));\n    }\n\n    return predicate(value, path);\n  }\n\n  return inner(target);\n}\n\nexport { walkObject };","map":{"version":3,"sources":["C:/Users/HP/Desktop/pfe/node_modules/@chakra-ui/utils/dist/chunk-DVFODTG7.mjs"],"names":["fromEntries","isArray","isObject","walkObject","target","predicate","inner","value","path","map","item","index","String","Object","entries","key","child"],"mappings":"AAAA,SACEA,WADF,QAEO,sBAFP;AAGA,SACEC,OADF,EAEEC,QAFF,QAGO,sBAHP,C,CAKA;;AACA,SAASC,UAAT,CAAoBC,MAApB,EAA4BC,SAA5B,EAAuC;AACrC,WAASC,KAAT,CAAeC,KAAf,EAAsBC,IAAI,GAAG,EAA7B,EAAiC;AAC/B,QAAIP,OAAO,CAACM,KAAD,CAAX,EAAoB;AAClB,aAAOA,KAAK,CAACE,GAAN,CAAU,CAACC,IAAD,EAAOC,KAAP,KAAiBL,KAAK,CAACI,IAAD,EAAO,CAAC,GAAGF,IAAJ,EAAUI,MAAM,CAACD,KAAD,CAAhB,CAAP,CAAhC,CAAP;AACD;;AACD,QAAIT,QAAQ,CAACK,KAAD,CAAZ,EAAqB;AACnB,aAAOP,WAAW,CAChBa,MAAM,CAACC,OAAP,CAAeP,KAAf,EAAsBE,GAAtB,CAA0B,CAAC,CAACM,GAAD,EAAMC,KAAN,CAAD,KAAkB,CAC1CD,GAD0C,EAE1CT,KAAK,CAACU,KAAD,EAAQ,CAAC,GAAGR,IAAJ,EAAUO,GAAV,CAAR,CAFqC,CAA5C,CADgB,CAAlB;AAMD;;AACD,WAAOV,SAAS,CAACE,KAAD,EAAQC,IAAR,CAAhB;AACD;;AACD,SAAOF,KAAK,CAACF,MAAD,CAAZ;AACD;;AAED,SACED,UADF","sourcesContent":["import {\n  fromEntries\n} from \"./chunk-YTQ3XZ3T.mjs\";\nimport {\n  isArray,\n  isObject\n} from \"./chunk-Y5FGD7DM.mjs\";\n\n// src/walk-object.ts\nfunction walkObject(target, predicate) {\n  function inner(value, path = []) {\n    if (isArray(value)) {\n      return value.map((item, index) => inner(item, [...path, String(index)]));\n    }\n    if (isObject(value)) {\n      return fromEntries(\n        Object.entries(value).map(([key, child]) => [\n          key,\n          inner(child, [...path, key])\n        ])\n      );\n    }\n    return predicate(value, path);\n  }\n  return inner(target);\n}\n\nexport {\n  walkObject\n};\n"]},"metadata":{},"sourceType":"module"}