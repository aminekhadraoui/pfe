{"ast":null,"code":"// src/use-counter.ts\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nimport { clampValue, countDecimalPlaces, toPrecision } from \"@chakra-ui/number-utils\";\nimport { useCallback, useState } from \"react\";\n\nfunction useCounter(props = {}) {\n  const {\n    onChange,\n    precision: precisionProp,\n    defaultValue,\n    value: valueProp,\n    step: stepProp = 1,\n    min = Number.MIN_SAFE_INTEGER,\n    max = Number.MAX_SAFE_INTEGER,\n    keepWithinRange = true\n  } = props;\n  const onChangeProp = useCallbackRef(onChange);\n  const [valueState, setValue] = useState(() => {\n    var _a;\n\n    if (defaultValue == null) return \"\";\n    return (_a = cast(defaultValue, stepProp, precisionProp)) != null ? _a : \"\";\n  });\n  const isControlled = typeof valueProp !== \"undefined\";\n  const value = isControlled ? valueProp : valueState;\n  const decimalPlaces = getDecimalPlaces(parse(value), stepProp);\n  const precision = precisionProp != null ? precisionProp : decimalPlaces;\n  const update = useCallback(next => {\n    if (next === value) return;\n\n    if (!isControlled) {\n      setValue(next.toString());\n    }\n\n    onChangeProp == null ? void 0 : onChangeProp(next.toString(), parse(next));\n  }, [onChangeProp, isControlled, value]);\n  const clamp = useCallback(value2 => {\n    let nextValue = value2;\n\n    if (keepWithinRange) {\n      nextValue = clampValue(nextValue, min, max);\n    }\n\n    return toPrecision(nextValue, precision);\n  }, [precision, keepWithinRange, max, min]);\n  const increment = useCallback((step = stepProp) => {\n    let next;\n\n    if (value === \"\") {\n      next = parse(step);\n    } else {\n      next = parse(value) + step;\n    }\n\n    next = clamp(next);\n    update(next);\n  }, [clamp, stepProp, update, value]);\n  const decrement = useCallback((step = stepProp) => {\n    let next;\n\n    if (value === \"\") {\n      next = parse(-step);\n    } else {\n      next = parse(value) - step;\n    }\n\n    next = clamp(next);\n    update(next);\n  }, [clamp, stepProp, update, value]);\n  const reset = useCallback(() => {\n    var _a;\n\n    let next;\n\n    if (defaultValue == null) {\n      next = \"\";\n    } else {\n      next = (_a = cast(defaultValue, stepProp, precisionProp)) != null ? _a : min;\n    }\n\n    update(next);\n  }, [defaultValue, precisionProp, stepProp, update, min]);\n  const castValue = useCallback(value2 => {\n    var _a;\n\n    const nextValue = (_a = cast(value2, stepProp, precision)) != null ? _a : min;\n    update(nextValue);\n  }, [precision, stepProp, update, min]);\n  const valueAsNumber = parse(value);\n  const isOutOfRange = valueAsNumber > max || valueAsNumber < min;\n  const isAtMax = valueAsNumber === max;\n  const isAtMin = valueAsNumber === min;\n  return {\n    isOutOfRange,\n    isAtMax,\n    isAtMin,\n    precision,\n    value,\n    valueAsNumber,\n    update,\n    reset,\n    increment,\n    decrement,\n    clamp,\n    cast: castValue,\n    setValue\n  };\n}\n\nfunction parse(value) {\n  return parseFloat(value.toString().replace(/[^\\w.-]+/g, \"\"));\n}\n\nfunction getDecimalPlaces(value, step) {\n  return Math.max(countDecimalPlaces(step), countDecimalPlaces(value));\n}\n\nfunction cast(value, step, precision) {\n  const parsedValue = parse(value);\n  if (Number.isNaN(parsedValue)) return void 0;\n  const decimalPlaces = getDecimalPlaces(parsedValue, step);\n  return toPrecision(parsedValue, precision != null ? precision : decimalPlaces);\n}\n\nexport { useCounter };","map":{"version":3,"sources":["C:/Users/HP/Desktop/pfe/node_modules/@chakra-ui/counter/dist/chunk-O3YOOUZ7.mjs"],"names":["useCallbackRef","clampValue","countDecimalPlaces","toPrecision","useCallback","useState","useCounter","props","onChange","precision","precisionProp","defaultValue","value","valueProp","step","stepProp","min","Number","MIN_SAFE_INTEGER","max","MAX_SAFE_INTEGER","keepWithinRange","onChangeProp","valueState","setValue","_a","cast","isControlled","decimalPlaces","getDecimalPlaces","parse","update","next","toString","clamp","value2","nextValue","increment","decrement","reset","castValue","valueAsNumber","isOutOfRange","isAtMax","isAtMin","parseFloat","replace","Math","parsedValue","isNaN"],"mappings":"AAAA;AACA,SAASA,cAAT,QAA+B,mCAA/B;AACA,SACEC,UADF,EAEEC,kBAFF,EAGEC,WAHF,QAIO,yBAJP;AAKA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;;AACA,SAASC,UAAT,CAAoBC,KAAK,GAAG,EAA5B,EAAgC;AAC9B,QAAM;AACJC,IAAAA,QADI;AAEJC,IAAAA,SAAS,EAAEC,aAFP;AAGJC,IAAAA,YAHI;AAIJC,IAAAA,KAAK,EAAEC,SAJH;AAKJC,IAAAA,IAAI,EAAEC,QAAQ,GAAG,CALb;AAMJC,IAAAA,GAAG,GAAGC,MAAM,CAACC,gBANT;AAOJC,IAAAA,GAAG,GAAGF,MAAM,CAACG,gBAPT;AAQJC,IAAAA,eAAe,GAAG;AARd,MASFd,KATJ;AAUA,QAAMe,YAAY,GAAGtB,cAAc,CAACQ,QAAD,CAAnC;AACA,QAAM,CAACe,UAAD,EAAaC,QAAb,IAAyBnB,QAAQ,CAAC,MAAM;AAC5C,QAAIoB,EAAJ;;AACA,QAAId,YAAY,IAAI,IAApB,EACE,OAAO,EAAP;AACF,WAAO,CAACc,EAAE,GAAGC,IAAI,CAACf,YAAD,EAAeI,QAAf,EAAyBL,aAAzB,CAAV,KAAsD,IAAtD,GAA6De,EAA7D,GAAkE,EAAzE;AACD,GALsC,CAAvC;AAMA,QAAME,YAAY,GAAG,OAAOd,SAAP,KAAqB,WAA1C;AACA,QAAMD,KAAK,GAAGe,YAAY,GAAGd,SAAH,GAAeU,UAAzC;AACA,QAAMK,aAAa,GAAGC,gBAAgB,CAACC,KAAK,CAAClB,KAAD,CAAN,EAAeG,QAAf,CAAtC;AACA,QAAMN,SAAS,GAAGC,aAAa,IAAI,IAAjB,GAAwBA,aAAxB,GAAwCkB,aAA1D;AACA,QAAMG,MAAM,GAAG3B,WAAW,CACvB4B,IAAD,IAAU;AACR,QAAIA,IAAI,KAAKpB,KAAb,EACE;;AACF,QAAI,CAACe,YAAL,EAAmB;AACjBH,MAAAA,QAAQ,CAACQ,IAAI,CAACC,QAAL,EAAD,CAAR;AACD;;AACDX,IAAAA,YAAY,IAAI,IAAhB,GAAuB,KAAK,CAA5B,GAAgCA,YAAY,CAACU,IAAI,CAACC,QAAL,EAAD,EAAkBH,KAAK,CAACE,IAAD,CAAvB,CAA5C;AACD,GARuB,EASxB,CAACV,YAAD,EAAeK,YAAf,EAA6Bf,KAA7B,CATwB,CAA1B;AAWA,QAAMsB,KAAK,GAAG9B,WAAW,CACtB+B,MAAD,IAAY;AACV,QAAIC,SAAS,GAAGD,MAAhB;;AACA,QAAId,eAAJ,EAAqB;AACnBe,MAAAA,SAAS,GAAGnC,UAAU,CAACmC,SAAD,EAAYpB,GAAZ,EAAiBG,GAAjB,CAAtB;AACD;;AACD,WAAOhB,WAAW,CAACiC,SAAD,EAAY3B,SAAZ,CAAlB;AACD,GAPsB,EAQvB,CAACA,SAAD,EAAYY,eAAZ,EAA6BF,GAA7B,EAAkCH,GAAlC,CARuB,CAAzB;AAUA,QAAMqB,SAAS,GAAGjC,WAAW,CAC3B,CAACU,IAAI,GAAGC,QAAR,KAAqB;AACnB,QAAIiB,IAAJ;;AACA,QAAIpB,KAAK,KAAK,EAAd,EAAkB;AAChBoB,MAAAA,IAAI,GAAGF,KAAK,CAAChB,IAAD,CAAZ;AACD,KAFD,MAEO;AACLkB,MAAAA,IAAI,GAAGF,KAAK,CAAClB,KAAD,CAAL,GAAeE,IAAtB;AACD;;AACDkB,IAAAA,IAAI,GAAGE,KAAK,CAACF,IAAD,CAAZ;AACAD,IAAAA,MAAM,CAACC,IAAD,CAAN;AACD,GAV0B,EAW3B,CAACE,KAAD,EAAQnB,QAAR,EAAkBgB,MAAlB,EAA0BnB,KAA1B,CAX2B,CAA7B;AAaA,QAAM0B,SAAS,GAAGlC,WAAW,CAC3B,CAACU,IAAI,GAAGC,QAAR,KAAqB;AACnB,QAAIiB,IAAJ;;AACA,QAAIpB,KAAK,KAAK,EAAd,EAAkB;AAChBoB,MAAAA,IAAI,GAAGF,KAAK,CAAC,CAAChB,IAAF,CAAZ;AACD,KAFD,MAEO;AACLkB,MAAAA,IAAI,GAAGF,KAAK,CAAClB,KAAD,CAAL,GAAeE,IAAtB;AACD;;AACDkB,IAAAA,IAAI,GAAGE,KAAK,CAACF,IAAD,CAAZ;AACAD,IAAAA,MAAM,CAACC,IAAD,CAAN;AACD,GAV0B,EAW3B,CAACE,KAAD,EAAQnB,QAAR,EAAkBgB,MAAlB,EAA0BnB,KAA1B,CAX2B,CAA7B;AAaA,QAAM2B,KAAK,GAAGnC,WAAW,CAAC,MAAM;AAC9B,QAAIqB,EAAJ;;AACA,QAAIO,IAAJ;;AACA,QAAIrB,YAAY,IAAI,IAApB,EAA0B;AACxBqB,MAAAA,IAAI,GAAG,EAAP;AACD,KAFD,MAEO;AACLA,MAAAA,IAAI,GAAG,CAACP,EAAE,GAAGC,IAAI,CAACf,YAAD,EAAeI,QAAf,EAAyBL,aAAzB,CAAV,KAAsD,IAAtD,GAA6De,EAA7D,GAAkET,GAAzE;AACD;;AACDe,IAAAA,MAAM,CAACC,IAAD,CAAN;AACD,GATwB,EAStB,CAACrB,YAAD,EAAeD,aAAf,EAA8BK,QAA9B,EAAwCgB,MAAxC,EAAgDf,GAAhD,CATsB,CAAzB;AAUA,QAAMwB,SAAS,GAAGpC,WAAW,CAC1B+B,MAAD,IAAY;AACV,QAAIV,EAAJ;;AACA,UAAMW,SAAS,GAAG,CAACX,EAAE,GAAGC,IAAI,CAACS,MAAD,EAASpB,QAAT,EAAmBN,SAAnB,CAAV,KAA4C,IAA5C,GAAmDgB,EAAnD,GAAwDT,GAA1E;AACAe,IAAAA,MAAM,CAACK,SAAD,CAAN;AACD,GAL0B,EAM3B,CAAC3B,SAAD,EAAYM,QAAZ,EAAsBgB,MAAtB,EAA8Bf,GAA9B,CAN2B,CAA7B;AAQA,QAAMyB,aAAa,GAAGX,KAAK,CAAClB,KAAD,CAA3B;AACA,QAAM8B,YAAY,GAAGD,aAAa,GAAGtB,GAAhB,IAAuBsB,aAAa,GAAGzB,GAA5D;AACA,QAAM2B,OAAO,GAAGF,aAAa,KAAKtB,GAAlC;AACA,QAAMyB,OAAO,GAAGH,aAAa,KAAKzB,GAAlC;AACA,SAAO;AACL0B,IAAAA,YADK;AAELC,IAAAA,OAFK;AAGLC,IAAAA,OAHK;AAILnC,IAAAA,SAJK;AAKLG,IAAAA,KALK;AAML6B,IAAAA,aANK;AAOLV,IAAAA,MAPK;AAQLQ,IAAAA,KARK;AASLF,IAAAA,SATK;AAULC,IAAAA,SAVK;AAWLJ,IAAAA,KAXK;AAYLR,IAAAA,IAAI,EAAEc,SAZD;AAaLhB,IAAAA;AAbK,GAAP;AAeD;;AACD,SAASM,KAAT,CAAelB,KAAf,EAAsB;AACpB,SAAOiC,UAAU,CAACjC,KAAK,CAACqB,QAAN,GAAiBa,OAAjB,CAAyB,WAAzB,EAAsC,EAAtC,CAAD,CAAjB;AACD;;AACD,SAASjB,gBAAT,CAA0BjB,KAA1B,EAAiCE,IAAjC,EAAuC;AACrC,SAAOiC,IAAI,CAAC5B,GAAL,CAASjB,kBAAkB,CAACY,IAAD,CAA3B,EAAmCZ,kBAAkB,CAACU,KAAD,CAArD,CAAP;AACD;;AACD,SAASc,IAAT,CAAcd,KAAd,EAAqBE,IAArB,EAA2BL,SAA3B,EAAsC;AACpC,QAAMuC,WAAW,GAAGlB,KAAK,CAAClB,KAAD,CAAzB;AACA,MAAIK,MAAM,CAACgC,KAAP,CAAaD,WAAb,CAAJ,EACE,OAAO,KAAK,CAAZ;AACF,QAAMpB,aAAa,GAAGC,gBAAgB,CAACmB,WAAD,EAAclC,IAAd,CAAtC;AACA,SAAOX,WAAW,CAAC6C,WAAD,EAAcvC,SAAS,IAAI,IAAb,GAAoBA,SAApB,GAAgCmB,aAA9C,CAAlB;AACD;;AAED,SACEtB,UADF","sourcesContent":["// src/use-counter.ts\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nimport {\n  clampValue,\n  countDecimalPlaces,\n  toPrecision\n} from \"@chakra-ui/number-utils\";\nimport { useCallback, useState } from \"react\";\nfunction useCounter(props = {}) {\n  const {\n    onChange,\n    precision: precisionProp,\n    defaultValue,\n    value: valueProp,\n    step: stepProp = 1,\n    min = Number.MIN_SAFE_INTEGER,\n    max = Number.MAX_SAFE_INTEGER,\n    keepWithinRange = true\n  } = props;\n  const onChangeProp = useCallbackRef(onChange);\n  const [valueState, setValue] = useState(() => {\n    var _a;\n    if (defaultValue == null)\n      return \"\";\n    return (_a = cast(defaultValue, stepProp, precisionProp)) != null ? _a : \"\";\n  });\n  const isControlled = typeof valueProp !== \"undefined\";\n  const value = isControlled ? valueProp : valueState;\n  const decimalPlaces = getDecimalPlaces(parse(value), stepProp);\n  const precision = precisionProp != null ? precisionProp : decimalPlaces;\n  const update = useCallback(\n    (next) => {\n      if (next === value)\n        return;\n      if (!isControlled) {\n        setValue(next.toString());\n      }\n      onChangeProp == null ? void 0 : onChangeProp(next.toString(), parse(next));\n    },\n    [onChangeProp, isControlled, value]\n  );\n  const clamp = useCallback(\n    (value2) => {\n      let nextValue = value2;\n      if (keepWithinRange) {\n        nextValue = clampValue(nextValue, min, max);\n      }\n      return toPrecision(nextValue, precision);\n    },\n    [precision, keepWithinRange, max, min]\n  );\n  const increment = useCallback(\n    (step = stepProp) => {\n      let next;\n      if (value === \"\") {\n        next = parse(step);\n      } else {\n        next = parse(value) + step;\n      }\n      next = clamp(next);\n      update(next);\n    },\n    [clamp, stepProp, update, value]\n  );\n  const decrement = useCallback(\n    (step = stepProp) => {\n      let next;\n      if (value === \"\") {\n        next = parse(-step);\n      } else {\n        next = parse(value) - step;\n      }\n      next = clamp(next);\n      update(next);\n    },\n    [clamp, stepProp, update, value]\n  );\n  const reset = useCallback(() => {\n    var _a;\n    let next;\n    if (defaultValue == null) {\n      next = \"\";\n    } else {\n      next = (_a = cast(defaultValue, stepProp, precisionProp)) != null ? _a : min;\n    }\n    update(next);\n  }, [defaultValue, precisionProp, stepProp, update, min]);\n  const castValue = useCallback(\n    (value2) => {\n      var _a;\n      const nextValue = (_a = cast(value2, stepProp, precision)) != null ? _a : min;\n      update(nextValue);\n    },\n    [precision, stepProp, update, min]\n  );\n  const valueAsNumber = parse(value);\n  const isOutOfRange = valueAsNumber > max || valueAsNumber < min;\n  const isAtMax = valueAsNumber === max;\n  const isAtMin = valueAsNumber === min;\n  return {\n    isOutOfRange,\n    isAtMax,\n    isAtMin,\n    precision,\n    value,\n    valueAsNumber,\n    update,\n    reset,\n    increment,\n    decrement,\n    clamp,\n    cast: castValue,\n    setValue\n  };\n}\nfunction parse(value) {\n  return parseFloat(value.toString().replace(/[^\\w.-]+/g, \"\"));\n}\nfunction getDecimalPlaces(value, step) {\n  return Math.max(countDecimalPlaces(step), countDecimalPlaces(value));\n}\nfunction cast(value, step, precision) {\n  const parsedValue = parse(value);\n  if (Number.isNaN(parsedValue))\n    return void 0;\n  const decimalPlaces = getDecimalPlaces(parsedValue, step);\n  return toPrecision(parsedValue, precision != null ? precision : decimalPlaces);\n}\n\nexport {\n  useCounter\n};\n"]},"metadata":{},"sourceType":"module"}