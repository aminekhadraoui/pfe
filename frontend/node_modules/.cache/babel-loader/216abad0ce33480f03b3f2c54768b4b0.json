{"ast":null,"code":"var alwaysContainsScroll = function (node) {\n  // textarea will always _contain_ scroll inside self. It only can be hidden\n  return node.tagName === 'TEXTAREA';\n};\n\nvar elementCanBeScrolled = function (node, overflow) {\n  var styles = window.getComputedStyle(node);\n  return (// not-not-scrollable\n    styles[overflow] !== 'hidden' && // contains scroll inside self\n    !(styles.overflowY === styles.overflowX && !alwaysContainsScroll(node) && styles[overflow] === 'visible')\n  );\n};\n\nvar elementCouldBeVScrolled = function (node) {\n  return elementCanBeScrolled(node, 'overflowY');\n};\n\nvar elementCouldBeHScrolled = function (node) {\n  return elementCanBeScrolled(node, 'overflowX');\n};\n\nexport var locationCouldBeScrolled = function (axis, node) {\n  var ownerDocument = node.ownerDocument;\n  var current = node;\n\n  do {\n    // Skip over shadow root\n    if (typeof ShadowRoot !== 'undefined' && current instanceof ShadowRoot) {\n      current = current.host;\n    }\n\n    var isScrollable = elementCouldBeScrolled(axis, current);\n\n    if (isScrollable) {\n      var _a = getScrollVariables(axis, current),\n          s = _a[1],\n          d = _a[2];\n\n      if (s > d) {\n        return true;\n      }\n    }\n\n    current = current.parentNode;\n  } while (current && current !== ownerDocument.body);\n\n  return false;\n};\n\nvar getVScrollVariables = function (_a) {\n  var scrollTop = _a.scrollTop,\n      scrollHeight = _a.scrollHeight,\n      clientHeight = _a.clientHeight;\n  return [scrollTop, scrollHeight, clientHeight];\n};\n\nvar getHScrollVariables = function (_a) {\n  var scrollLeft = _a.scrollLeft,\n      scrollWidth = _a.scrollWidth,\n      clientWidth = _a.clientWidth;\n  return [scrollLeft, scrollWidth, clientWidth];\n};\n\nvar elementCouldBeScrolled = function (axis, node) {\n  return axis === 'v' ? elementCouldBeVScrolled(node) : elementCouldBeHScrolled(node);\n};\n\nvar getScrollVariables = function (axis, node) {\n  return axis === 'v' ? getVScrollVariables(node) : getHScrollVariables(node);\n};\n\nvar getDirectionFactor = function (axis, direction) {\n  /**\n   * If the element's direction is rtl (right-to-left), then scrollLeft is 0 when the scrollbar is at its rightmost position,\n   * and then increasingly negative as you scroll towards the end of the content.\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollLeft\n   */\n  return axis === 'h' && direction === 'rtl' ? -1 : 1;\n};\n\nexport var handleScroll = function (axis, endTarget, event, sourceDelta, noOverscroll) {\n  var directionFactor = getDirectionFactor(axis, window.getComputedStyle(endTarget).direction);\n  var delta = directionFactor * sourceDelta; // find scrollable target\n\n  var target = event.target;\n  var targetInLock = endTarget.contains(target);\n  var shouldCancelScroll = false;\n  var isDeltaPositive = delta > 0;\n  var availableScroll = 0;\n  var availableScrollTop = 0;\n\n  do {\n    var _a = getScrollVariables(axis, target),\n        position = _a[0],\n        scroll_1 = _a[1],\n        capacity = _a[2];\n\n    var elementScroll = scroll_1 - capacity - directionFactor * position;\n\n    if (position || elementScroll) {\n      if (elementCouldBeScrolled(axis, target)) {\n        availableScroll += elementScroll;\n        availableScrollTop += position;\n      }\n    }\n\n    target = target.parentNode;\n  } while ( // portaled content\n  !targetInLock && target !== document.body || // self content\n  targetInLock && (endTarget.contains(target) || endTarget === target));\n\n  if (isDeltaPositive && (noOverscroll && availableScroll === 0 || !noOverscroll && delta > availableScroll)) {\n    shouldCancelScroll = true;\n  } else if (!isDeltaPositive && (noOverscroll && availableScrollTop === 0 || !noOverscroll && -delta > availableScrollTop)) {\n    shouldCancelScroll = true;\n  }\n\n  return shouldCancelScroll;\n};","map":{"version":3,"sources":["C:/Users/HP/Desktop/pfe/node_modules/react-remove-scroll/dist/es2015/handleScroll.js"],"names":["alwaysContainsScroll","node","tagName","elementCanBeScrolled","overflow","styles","window","getComputedStyle","overflowY","overflowX","elementCouldBeVScrolled","elementCouldBeHScrolled","locationCouldBeScrolled","axis","ownerDocument","current","ShadowRoot","host","isScrollable","elementCouldBeScrolled","_a","getScrollVariables","s","d","parentNode","body","getVScrollVariables","scrollTop","scrollHeight","clientHeight","getHScrollVariables","scrollLeft","scrollWidth","clientWidth","getDirectionFactor","direction","handleScroll","endTarget","event","sourceDelta","noOverscroll","directionFactor","delta","target","targetInLock","contains","shouldCancelScroll","isDeltaPositive","availableScroll","availableScrollTop","position","scroll_1","capacity","elementScroll","document"],"mappings":"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","sourcesContent":["var alwaysContainsScroll = function (node) {\n    // textarea will always _contain_ scroll inside self. It only can be hidden\n    return node.tagName === 'TEXTAREA';\n};\nvar elementCanBeScrolled = function (node, overflow) {\n    var styles = window.getComputedStyle(node);\n    return (\n    // not-not-scrollable\n    styles[overflow] !== 'hidden' &&\n        // contains scroll inside self\n        !(styles.overflowY === styles.overflowX && !alwaysContainsScroll(node) && styles[overflow] === 'visible'));\n};\nvar elementCouldBeVScrolled = function (node) { return elementCanBeScrolled(node, 'overflowY'); };\nvar elementCouldBeHScrolled = function (node) { return elementCanBeScrolled(node, 'overflowX'); };\nexport var locationCouldBeScrolled = function (axis, node) {\n    var ownerDocument = node.ownerDocument;\n    var current = node;\n    do {\n        // Skip over shadow root\n        if (typeof ShadowRoot !== 'undefined' && current instanceof ShadowRoot) {\n            current = current.host;\n        }\n        var isScrollable = elementCouldBeScrolled(axis, current);\n        if (isScrollable) {\n            var _a = getScrollVariables(axis, current), s = _a[1], d = _a[2];\n            if (s > d) {\n                return true;\n            }\n        }\n        current = current.parentNode;\n    } while (current && current !== ownerDocument.body);\n    return false;\n};\nvar getVScrollVariables = function (_a) {\n    var scrollTop = _a.scrollTop, scrollHeight = _a.scrollHeight, clientHeight = _a.clientHeight;\n    return [\n        scrollTop,\n        scrollHeight,\n        clientHeight,\n    ];\n};\nvar getHScrollVariables = function (_a) {\n    var scrollLeft = _a.scrollLeft, scrollWidth = _a.scrollWidth, clientWidth = _a.clientWidth;\n    return [\n        scrollLeft,\n        scrollWidth,\n        clientWidth,\n    ];\n};\nvar elementCouldBeScrolled = function (axis, node) {\n    return axis === 'v' ? elementCouldBeVScrolled(node) : elementCouldBeHScrolled(node);\n};\nvar getScrollVariables = function (axis, node) {\n    return axis === 'v' ? getVScrollVariables(node) : getHScrollVariables(node);\n};\nvar getDirectionFactor = function (axis, direction) {\n    /**\n     * If the element's direction is rtl (right-to-left), then scrollLeft is 0 when the scrollbar is at its rightmost position,\n     * and then increasingly negative as you scroll towards the end of the content.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollLeft\n     */\n    return axis === 'h' && direction === 'rtl' ? -1 : 1;\n};\nexport var handleScroll = function (axis, endTarget, event, sourceDelta, noOverscroll) {\n    var directionFactor = getDirectionFactor(axis, window.getComputedStyle(endTarget).direction);\n    var delta = directionFactor * sourceDelta;\n    // find scrollable target\n    var target = event.target;\n    var targetInLock = endTarget.contains(target);\n    var shouldCancelScroll = false;\n    var isDeltaPositive = delta > 0;\n    var availableScroll = 0;\n    var availableScrollTop = 0;\n    do {\n        var _a = getScrollVariables(axis, target), position = _a[0], scroll_1 = _a[1], capacity = _a[2];\n        var elementScroll = scroll_1 - capacity - directionFactor * position;\n        if (position || elementScroll) {\n            if (elementCouldBeScrolled(axis, target)) {\n                availableScroll += elementScroll;\n                availableScrollTop += position;\n            }\n        }\n        target = target.parentNode;\n    } while (\n    // portaled content\n    (!targetInLock && target !== document.body) ||\n        // self content\n        (targetInLock && (endTarget.contains(target) || endTarget === target)));\n    if (isDeltaPositive && ((noOverscroll && availableScroll === 0) || (!noOverscroll && delta > availableScroll))) {\n        shouldCancelScroll = true;\n    }\n    else if (!isDeltaPositive &&\n        ((noOverscroll && availableScrollTop === 0) || (!noOverscroll && -delta > availableScrollTop))) {\n        shouldCancelScroll = true;\n    }\n    return shouldCancelScroll;\n};\n"]},"metadata":{},"sourceType":"module"}