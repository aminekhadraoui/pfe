{"ast":null,"code":"// src/use-checkbox-group.ts\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\";\nimport { isObject } from \"@chakra-ui/shared-utils\";\nimport { useCallback } from \"react\";\n\nfunction isInputEvent(value) {\n  return value && isObject(value) && isObject(value.target);\n}\n\nfunction useCheckboxGroup(props = {}) {\n  const {\n    defaultValue,\n    value: valueProp,\n    onChange,\n    isDisabled,\n    isNative\n  } = props;\n  const onChangeProp = useCallbackRef(onChange);\n  const [value, setValue] = useControllableState({\n    value: valueProp,\n    defaultValue: defaultValue || [],\n    onChange: onChangeProp\n  });\n  const handleChange = useCallback(eventOrValue => {\n    if (!value) return;\n    const isChecked = isInputEvent(eventOrValue) ? eventOrValue.target.checked : !value.includes(eventOrValue);\n    const selectedValue = isInputEvent(eventOrValue) ? eventOrValue.target.value : eventOrValue;\n    const nextValue = isChecked ? [...value, selectedValue] : value.filter(v => String(v) !== String(selectedValue));\n    setValue(nextValue);\n  }, [setValue, value]);\n  const getCheckboxProps = useCallback((props2 = {}) => {\n    const checkedKey = isNative ? \"checked\" : \"isChecked\";\n    return { ...props2,\n      [checkedKey]: value.some(val => String(props2.value) === String(val)),\n      onChange: handleChange\n    };\n  }, [handleChange, isNative, value]);\n  return {\n    value,\n    isDisabled,\n    onChange: handleChange,\n    setValue,\n    getCheckboxProps\n  };\n}\n\nexport { useCheckboxGroup };","map":{"version":3,"sources":["C:/Users/HP/Desktop/pfe/node_modules/@chakra-ui/checkbox/dist/chunk-5F7ST2TT.mjs"],"names":["useCallbackRef","useControllableState","isObject","useCallback","isInputEvent","value","target","useCheckboxGroup","props","defaultValue","valueProp","onChange","isDisabled","isNative","onChangeProp","setValue","handleChange","eventOrValue","isChecked","checked","includes","selectedValue","nextValue","filter","v","String","getCheckboxProps","props2","checkedKey","some","val"],"mappings":"AAAA;AACA,SAASA,cAAT,QAA+B,mCAA/B;AACA,SAASC,oBAAT,QAAqC,yCAArC;AACA,SAASC,QAAT,QAAyB,yBAAzB;AACA,SAASC,WAAT,QAA4B,OAA5B;;AACA,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B,SAAOA,KAAK,IAAIH,QAAQ,CAACG,KAAD,CAAjB,IAA4BH,QAAQ,CAACG,KAAK,CAACC,MAAP,CAA3C;AACD;;AACD,SAASC,gBAAT,CAA0BC,KAAK,GAAG,EAAlC,EAAsC;AACpC,QAAM;AACJC,IAAAA,YADI;AAEJJ,IAAAA,KAAK,EAAEK,SAFH;AAGJC,IAAAA,QAHI;AAIJC,IAAAA,UAJI;AAKJC,IAAAA;AALI,MAMFL,KANJ;AAOA,QAAMM,YAAY,GAAGd,cAAc,CAACW,QAAD,CAAnC;AACA,QAAM,CAACN,KAAD,EAAQU,QAAR,IAAoBd,oBAAoB,CAAC;AAC7CI,IAAAA,KAAK,EAAEK,SADsC;AAE7CD,IAAAA,YAAY,EAAEA,YAAY,IAAI,EAFe;AAG7CE,IAAAA,QAAQ,EAAEG;AAHmC,GAAD,CAA9C;AAKA,QAAME,YAAY,GAAGb,WAAW,CAC7Bc,YAAD,IAAkB;AAChB,QAAI,CAACZ,KAAL,EACE;AACF,UAAMa,SAAS,GAAGd,YAAY,CAACa,YAAD,CAAZ,GAA6BA,YAAY,CAACX,MAAb,CAAoBa,OAAjD,GAA2D,CAACd,KAAK,CAACe,QAAN,CAAeH,YAAf,CAA9E;AACA,UAAMI,aAAa,GAAGjB,YAAY,CAACa,YAAD,CAAZ,GAA6BA,YAAY,CAACX,MAAb,CAAoBD,KAAjD,GAAyDY,YAA/E;AACA,UAAMK,SAAS,GAAGJ,SAAS,GAAG,CAAC,GAAGb,KAAJ,EAAWgB,aAAX,CAAH,GAA+BhB,KAAK,CAACkB,MAAN,CAAcC,CAAD,IAAOC,MAAM,CAACD,CAAD,CAAN,KAAcC,MAAM,CAACJ,aAAD,CAAxC,CAA1D;AACAN,IAAAA,QAAQ,CAACO,SAAD,CAAR;AACD,GAR6B,EAS9B,CAACP,QAAD,EAAWV,KAAX,CAT8B,CAAhC;AAWA,QAAMqB,gBAAgB,GAAGvB,WAAW,CAClC,CAACwB,MAAM,GAAG,EAAV,KAAiB;AACf,UAAMC,UAAU,GAAGf,QAAQ,GAAG,SAAH,GAAe,WAA1C;AACA,WAAO,EACL,GAAGc,MADE;AAEL,OAACC,UAAD,GAAcvB,KAAK,CAACwB,IAAN,CAAYC,GAAD,IAASL,MAAM,CAACE,MAAM,CAACtB,KAAR,CAAN,KAAyBoB,MAAM,CAACK,GAAD,CAAnD,CAFT;AAGLnB,MAAAA,QAAQ,EAAEK;AAHL,KAAP;AAKD,GARiC,EASlC,CAACA,YAAD,EAAeH,QAAf,EAAyBR,KAAzB,CATkC,CAApC;AAWA,SAAO;AACLA,IAAAA,KADK;AAELO,IAAAA,UAFK;AAGLD,IAAAA,QAAQ,EAAEK,YAHL;AAILD,IAAAA,QAJK;AAKLW,IAAAA;AALK,GAAP;AAOD;;AAED,SACEnB,gBADF","sourcesContent":["// src/use-checkbox-group.ts\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\";\nimport { isObject } from \"@chakra-ui/shared-utils\";\nimport { useCallback } from \"react\";\nfunction isInputEvent(value) {\n  return value && isObject(value) && isObject(value.target);\n}\nfunction useCheckboxGroup(props = {}) {\n  const {\n    defaultValue,\n    value: valueProp,\n    onChange,\n    isDisabled,\n    isNative\n  } = props;\n  const onChangeProp = useCallbackRef(onChange);\n  const [value, setValue] = useControllableState({\n    value: valueProp,\n    defaultValue: defaultValue || [],\n    onChange: onChangeProp\n  });\n  const handleChange = useCallback(\n    (eventOrValue) => {\n      if (!value)\n        return;\n      const isChecked = isInputEvent(eventOrValue) ? eventOrValue.target.checked : !value.includes(eventOrValue);\n      const selectedValue = isInputEvent(eventOrValue) ? eventOrValue.target.value : eventOrValue;\n      const nextValue = isChecked ? [...value, selectedValue] : value.filter((v) => String(v) !== String(selectedValue));\n      setValue(nextValue);\n    },\n    [setValue, value]\n  );\n  const getCheckboxProps = useCallback(\n    (props2 = {}) => {\n      const checkedKey = isNative ? \"checked\" : \"isChecked\";\n      return {\n        ...props2,\n        [checkedKey]: value.some((val) => String(props2.value) === String(val)),\n        onChange: handleChange\n      };\n    },\n    [handleChange, isNative, value]\n  );\n  return {\n    value,\n    isDisabled,\n    onChange: handleChange,\n    setValue,\n    getCheckboxProps\n  };\n}\n\nexport {\n  useCheckboxGroup\n};\n"]},"metadata":{},"sourceType":"module"}