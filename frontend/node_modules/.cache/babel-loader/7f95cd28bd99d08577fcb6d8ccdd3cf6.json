{"ast":null,"code":"import { PanEvent } from \"./chunk-OT5ZKXS2.mjs\"; // src/use-pan-event.ts\n\nimport { addPointerEvent } from \"@chakra-ui/event-utils\";\nimport { useLatestRef } from \"@chakra-ui/react-use-latest-ref\";\nimport { useEffect, useRef } from \"react\";\n\nfunction usePanEvent(ref, options) {\n  const {\n    onPan,\n    onPanStart,\n    onPanEnd,\n    onPanSessionStart,\n    onPanSessionEnd,\n    threshold\n  } = options;\n  const hasPanEvents = Boolean(onPan || onPanStart || onPanEnd || onPanSessionStart || onPanSessionEnd);\n  const panSession = useRef(null);\n  const handlersRef = useLatestRef({\n    onSessionStart: onPanSessionStart,\n    onSessionEnd: onPanSessionEnd,\n    onStart: onPanStart,\n    onMove: onPan,\n\n    onEnd(event, info) {\n      panSession.current = null;\n      onPanEnd == null ? void 0 : onPanEnd(event, info);\n    }\n\n  });\n  useEffect(() => {\n    var _a;\n\n    (_a = panSession.current) == null ? void 0 : _a.updateHandlers(handlersRef.current);\n  });\n  useEffect(() => {\n    const node = ref.current;\n    if (!node || !hasPanEvents) return;\n\n    function onPointerDown(event) {\n      panSession.current = new PanEvent(event, handlersRef.current, threshold);\n    }\n\n    return addPointerEvent(node, \"pointerdown\", onPointerDown);\n  }, [ref, hasPanEvents, handlersRef, threshold]);\n  useEffect(() => {\n    return () => {\n      var _a;\n\n      (_a = panSession.current) == null ? void 0 : _a.end();\n      panSession.current = null;\n    };\n  }, []);\n}\n\nexport { usePanEvent };","map":{"version":3,"sources":["C:/Users/HP/Desktop/pfe/node_modules/@chakra-ui/react-use-pan-event/dist/chunk-VOTNCFOA.mjs"],"names":["PanEvent","addPointerEvent","useLatestRef","useEffect","useRef","usePanEvent","ref","options","onPan","onPanStart","onPanEnd","onPanSessionStart","onPanSessionEnd","threshold","hasPanEvents","Boolean","panSession","handlersRef","onSessionStart","onSessionEnd","onStart","onMove","onEnd","event","info","current","_a","updateHandlers","node","onPointerDown","end"],"mappings":"AAAA,SACEA,QADF,QAEO,sBAFP,C,CAIA;;AACA,SAASC,eAAT,QAAgC,wBAAhC;AACA,SAASC,YAAT,QAA6B,iCAA7B;AACA,SAASC,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;;AACA,SAASC,WAAT,CAAqBC,GAArB,EAA0BC,OAA1B,EAAmC;AACjC,QAAM;AACJC,IAAAA,KADI;AAEJC,IAAAA,UAFI;AAGJC,IAAAA,QAHI;AAIJC,IAAAA,iBAJI;AAKJC,IAAAA,eALI;AAMJC,IAAAA;AANI,MAOFN,OAPJ;AAQA,QAAMO,YAAY,GAAGC,OAAO,CAC1BP,KAAK,IAAIC,UAAT,IAAuBC,QAAvB,IAAmCC,iBAAnC,IAAwDC,eAD9B,CAA5B;AAGA,QAAMI,UAAU,GAAGZ,MAAM,CAAC,IAAD,CAAzB;AACA,QAAMa,WAAW,GAAGf,YAAY,CAAC;AAC/BgB,IAAAA,cAAc,EAAEP,iBADe;AAE/BQ,IAAAA,YAAY,EAAEP,eAFiB;AAG/BQ,IAAAA,OAAO,EAAEX,UAHsB;AAI/BY,IAAAA,MAAM,EAAEb,KAJuB;;AAK/Bc,IAAAA,KAAK,CAACC,KAAD,EAAQC,IAAR,EAAc;AACjBR,MAAAA,UAAU,CAACS,OAAX,GAAqB,IAArB;AACAf,MAAAA,QAAQ,IAAI,IAAZ,GAAmB,KAAK,CAAxB,GAA4BA,QAAQ,CAACa,KAAD,EAAQC,IAAR,CAApC;AACD;;AAR8B,GAAD,CAAhC;AAUArB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIuB,EAAJ;;AACA,KAACA,EAAE,GAAGV,UAAU,CAACS,OAAjB,KAA6B,IAA7B,GAAoC,KAAK,CAAzC,GAA6CC,EAAE,CAACC,cAAH,CAAkBV,WAAW,CAACQ,OAA9B,CAA7C;AACD,GAHQ,CAAT;AAIAtB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMyB,IAAI,GAAGtB,GAAG,CAACmB,OAAjB;AACA,QAAI,CAACG,IAAD,IAAS,CAACd,YAAd,EACE;;AACF,aAASe,aAAT,CAAuBN,KAAvB,EAA8B;AAC5BP,MAAAA,UAAU,CAACS,OAAX,GAAqB,IAAIzB,QAAJ,CAAauB,KAAb,EAAoBN,WAAW,CAACQ,OAAhC,EAAyCZ,SAAzC,CAArB;AACD;;AACD,WAAOZ,eAAe,CAAC2B,IAAD,EAAO,aAAP,EAAsBC,aAAtB,CAAtB;AACD,GARQ,EAQN,CAACvB,GAAD,EAAMQ,YAAN,EAAoBG,WAApB,EAAiCJ,SAAjC,CARM,CAAT;AASAV,EAAAA,SAAS,CAAC,MAAM;AACd,WAAO,MAAM;AACX,UAAIuB,EAAJ;;AACA,OAACA,EAAE,GAAGV,UAAU,CAACS,OAAjB,KAA6B,IAA7B,GAAoC,KAAK,CAAzC,GAA6CC,EAAE,CAACI,GAAH,EAA7C;AACAd,MAAAA,UAAU,CAACS,OAAX,GAAqB,IAArB;AACD,KAJD;AAKD,GANQ,EAMN,EANM,CAAT;AAOD;;AAED,SACEpB,WADF","sourcesContent":["import {\n  PanEvent\n} from \"./chunk-OT5ZKXS2.mjs\";\n\n// src/use-pan-event.ts\nimport { addPointerEvent } from \"@chakra-ui/event-utils\";\nimport { useLatestRef } from \"@chakra-ui/react-use-latest-ref\";\nimport { useEffect, useRef } from \"react\";\nfunction usePanEvent(ref, options) {\n  const {\n    onPan,\n    onPanStart,\n    onPanEnd,\n    onPanSessionStart,\n    onPanSessionEnd,\n    threshold\n  } = options;\n  const hasPanEvents = Boolean(\n    onPan || onPanStart || onPanEnd || onPanSessionStart || onPanSessionEnd\n  );\n  const panSession = useRef(null);\n  const handlersRef = useLatestRef({\n    onSessionStart: onPanSessionStart,\n    onSessionEnd: onPanSessionEnd,\n    onStart: onPanStart,\n    onMove: onPan,\n    onEnd(event, info) {\n      panSession.current = null;\n      onPanEnd == null ? void 0 : onPanEnd(event, info);\n    }\n  });\n  useEffect(() => {\n    var _a;\n    (_a = panSession.current) == null ? void 0 : _a.updateHandlers(handlersRef.current);\n  });\n  useEffect(() => {\n    const node = ref.current;\n    if (!node || !hasPanEvents)\n      return;\n    function onPointerDown(event) {\n      panSession.current = new PanEvent(event, handlersRef.current, threshold);\n    }\n    return addPointerEvent(node, \"pointerdown\", onPointerDown);\n  }, [ref, hasPanEvents, handlersRef, threshold]);\n  useEffect(() => {\n    return () => {\n      var _a;\n      (_a = panSession.current) == null ? void 0 : _a.end();\n      panSession.current = null;\n    };\n  }, []);\n}\n\nexport {\n  usePanEvent\n};\n"]},"metadata":{},"sourceType":"module"}