{"ast":null,"code":"'use strict';\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (null != _i) {\n    var _s,\n        _e,\n        _x,\n        _r,\n        _arr = [],\n        _n = !0,\n        _d = !1;\n\n    try {\n      if (_x = (_i = _i.call(arr)).next, 0 === i) {\n        if (Object(_i) !== _i) return;\n        _n = !1;\n      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n    } catch (err) {\n      _d = !0, _e = err;\n    } finally {\n      try {\n        if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return;\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _construct(Parent, args, Class) {\n  if (_isNativeReflectConstruct()) {\n    _construct = Reflect.construct.bind();\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nfunction _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\n\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !_isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return _setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n\n  return (hint === \"string\" ? String : Number)(input);\n}\n\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n\n  return typeof key === \"symbol\" ? key : String(key);\n}\n/**\n * A simple guard function:\n *\n * ```js\n * Math.min(Math.max(low, value), high)\n * ```\n */\n\n\nfunction guard(low, high, value) {\n  return Math.min(Math.max(low, value), high);\n}\n\nvar ColorError = /*#__PURE__*/function (_Error) {\n  _inherits(ColorError, _Error);\n\n  var _super = _createSuper(ColorError);\n\n  function ColorError(color) {\n    _classCallCheck(this, ColorError);\n\n    return _super.call(this, `Failed to parse color: \"${color}\"`);\n  }\n\n  return _createClass(ColorError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nvar ColorError$1 = ColorError;\n/**\n * Parses a color into red, gree, blue, alpha parts\n *\n * @param color the input color. Can be a RGB, RBGA, HSL, HSLA, or named color\n */\n\nfunction parseToRgba(color) {\n  if (typeof color !== 'string') throw new ColorError$1(color);\n  if (color.trim().toLowerCase() === 'transparent') return [0, 0, 0, 0];\n  var normalizedColor = color.trim();\n  normalizedColor = namedColorRegex.test(color) ? nameToHex(color) : color;\n  var reducedHexMatch = reducedHexRegex.exec(normalizedColor);\n\n  if (reducedHexMatch) {\n    var arr = Array.from(reducedHexMatch).slice(1);\n    return [].concat(_toConsumableArray(arr.slice(0, 3).map(function (x) {\n      return parseInt(r(x, 2), 16);\n    })), [parseInt(r(arr[3] || 'f', 2), 16) / 255]);\n  }\n\n  var hexMatch = hexRegex.exec(normalizedColor);\n\n  if (hexMatch) {\n    var _arr = Array.from(hexMatch).slice(1);\n\n    return [].concat(_toConsumableArray(_arr.slice(0, 3).map(function (x) {\n      return parseInt(x, 16);\n    })), [parseInt(_arr[3] || 'ff', 16) / 255]);\n  }\n\n  var rgbaMatch = rgbaRegex.exec(normalizedColor);\n\n  if (rgbaMatch) {\n    var _arr2 = Array.from(rgbaMatch).slice(1);\n\n    return [].concat(_toConsumableArray(_arr2.slice(0, 3).map(function (x) {\n      return parseInt(x, 10);\n    })), [parseFloat(_arr2[3] || '1')]);\n  }\n\n  var hslaMatch = hslaRegex.exec(normalizedColor);\n\n  if (hslaMatch) {\n    var _Array$from$slice$map = Array.from(hslaMatch).slice(1).map(parseFloat),\n        _Array$from$slice$map2 = _slicedToArray(_Array$from$slice$map, 4),\n        h = _Array$from$slice$map2[0],\n        s = _Array$from$slice$map2[1],\n        l = _Array$from$slice$map2[2],\n        a = _Array$from$slice$map2[3];\n\n    if (guard(0, 100, s) !== s) throw new ColorError$1(color);\n    if (guard(0, 100, l) !== l) throw new ColorError$1(color);\n    return [].concat(_toConsumableArray(hslToRgb(h, s, l)), [Number.isNaN(a) ? 1 : a]);\n  }\n\n  throw new ColorError$1(color);\n}\n\nfunction hash(str) {\n  var hash = 5381;\n  var i = str.length;\n\n  while (i) {\n    hash = hash * 33 ^ str.charCodeAt(--i);\n  }\n  /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed\n   * integers. Since we want the results to be always positive, convert the\n   * signed int to an unsigned by doing an unsigned bitshift. */\n\n\n  return (hash >>> 0) % 2341;\n}\n\nvar colorToInt = function colorToInt(x) {\n  return parseInt(x.replace(/_/g, ''), 36);\n};\n\nvar compressedColorMap = '1q29ehhb 1n09sgk7 1kl1ekf_ _yl4zsno 16z9eiv3 1p29lhp8 _bd9zg04 17u0____ _iw9zhe5 _to73___ _r45e31e _7l6g016 _jh8ouiv _zn3qba8 1jy4zshs 11u87k0u 1ro9yvyo 1aj3xael 1gz9zjz0 _3w8l4xo 1bf1ekf_ _ke3v___ _4rrkb__ 13j776yz _646mbhl _nrjr4__ _le6mbhl 1n37ehkb _m75f91n _qj3bzfz 1939yygw 11i5z6x8 _1k5f8xs 1509441m 15t5lwgf _ae2th1n _tg1ugcv 1lp1ugcv 16e14up_ _h55rw7n _ny9yavn _7a11xb_ 1ih442g9 _pv442g9 1mv16xof 14e6y7tu 1oo9zkds 17d1cisi _4v9y70f _y98m8kc 1019pq0v 12o9zda8 _348j4f4 1et50i2o _8epa8__ _ts6senj 1o350i2o 1mi9eiuo 1259yrp0 1ln80gnw _632xcoy 1cn9zldc _f29edu4 1n490c8q _9f9ziet 1b94vk74 _m49zkct 1kz6s73a 1eu9dtog _q58s1rz 1dy9sjiq __u89jo3 _aj5nkwg _ld89jo3 13h9z6wx _qa9z2ii _l119xgq _bs5arju 1hj4nwk9 1qt4nwk9 1ge6wau6 14j9zlcw 11p1edc_ _ms1zcxe _439shk6 _jt9y70f _754zsow 1la40eju _oq5p___ _x279qkz 1fa5r3rv _yd2d9ip _424tcku _8y1di2_ _zi2uabw _yy7rn9h 12yz980_ __39ljp6 1b59zg0x _n39zfzp 1fy9zest _b33k___ _hp9wq92 1il50hz4 _io472ub _lj9z3eo 19z9ykg0 _8t8iu3a 12b9bl4a 1ak5yw0o _896v4ku _tb8k8lv _s59zi6t _c09ze0p 1lg80oqn 1id9z8wb _238nba5 1kq6wgdi _154zssg _tn3zk49 _da9y6tc 1sg7cv4f _r12jvtt 1gq5fmkz 1cs9rvci _lp9jn1c _xw1tdnb 13f9zje6 16f6973h _vo7ir40 _bt5arjf _rc45e4t _hr4e100 10v4e100 _hc9zke2 _w91egv_ _sj2r1kk 13c87yx8 _vqpds__ _ni8ggk8 _tj9yqfb 1ia2j4r4 _7x9b10u 1fc9ld4j 1eq9zldr _5j9lhpx _ez9zl6o _md61fzm'.split(' ').reduce(function (acc, next) {\n  var key = colorToInt(next.substring(0, 3));\n  var hex = colorToInt(next.substring(3)).toString(16); // NOTE: padStart could be used here but it breaks Node 6 compat\n  // https://github.com/ricokahler/color2k/issues/351\n\n  var prefix = '';\n\n  for (var i = 0; i < 6 - hex.length; i++) {\n    prefix += '0';\n  }\n\n  acc[key] = `${prefix}${hex}`;\n  return acc;\n}, {});\n/**\n * Checks if a string is a CSS named color and returns its equivalent hex value, otherwise returns the original color.\n */\n\nfunction nameToHex(color) {\n  var normalizedColorName = color.toLowerCase().trim();\n  var result = compressedColorMap[hash(normalizedColorName)];\n  if (!result) throw new ColorError$1(color);\n  return `#${result}`;\n}\n\nvar r = function r(str, amount) {\n  return Array.from(Array(amount)).map(function () {\n    return str;\n  }).join('');\n};\n\nvar reducedHexRegex = new RegExp(`^#${r('([a-f0-9])', 3)}([a-f0-9])?$`, 'i');\nvar hexRegex = new RegExp(`^#${r('([a-f0-9]{2})', 3)}([a-f0-9]{2})?$`, 'i');\nvar rgbaRegex = new RegExp(`^rgba?\\\\(\\\\s*(\\\\d+)\\\\s*${r(',\\\\s*(\\\\d+)\\\\s*', 2)}(?:,\\\\s*([\\\\d.]+))?\\\\s*\\\\)$`, 'i');\nvar hslaRegex = /^hsla?\\(\\s*([\\d.]+)\\s*,\\s*([\\d.]+)%\\s*,\\s*([\\d.]+)%(?:\\s*,\\s*([\\d.]+))?\\s*\\)$/i;\nvar namedColorRegex = /^[a-z]+$/i;\n\nvar roundColor = function roundColor(color) {\n  return Math.round(color * 255);\n};\n\nvar hslToRgb = function hslToRgb(hue, saturation, lightness) {\n  var l = lightness / 100;\n\n  if (saturation === 0) {\n    // achromatic\n    return [l, l, l].map(roundColor);\n  } // formulae from https://en.wikipedia.org/wiki/HSL_and_HSV\n\n\n  var huePrime = (hue % 360 + 360) % 360 / 60;\n  var chroma = (1 - Math.abs(2 * l - 1)) * (saturation / 100);\n  var secondComponent = chroma * (1 - Math.abs(huePrime % 2 - 1));\n  var red = 0;\n  var green = 0;\n  var blue = 0;\n\n  if (huePrime >= 0 && huePrime < 1) {\n    red = chroma;\n    green = secondComponent;\n  } else if (huePrime >= 1 && huePrime < 2) {\n    red = secondComponent;\n    green = chroma;\n  } else if (huePrime >= 2 && huePrime < 3) {\n    green = chroma;\n    blue = secondComponent;\n  } else if (huePrime >= 3 && huePrime < 4) {\n    green = secondComponent;\n    blue = chroma;\n  } else if (huePrime >= 4 && huePrime < 5) {\n    red = secondComponent;\n    blue = chroma;\n  } else if (huePrime >= 5 && huePrime < 6) {\n    red = chroma;\n    blue = secondComponent;\n  }\n\n  var lightnessModification = l - chroma / 2;\n  var finalRed = red + lightnessModification;\n  var finalGreen = green + lightnessModification;\n  var finalBlue = blue + lightnessModification;\n  return [finalRed, finalGreen, finalBlue].map(roundColor);\n};\n/**\n * Parses a color in hue, saturation, lightness, and the alpha channel.\n *\n * Hue is a number between 0 and 360, saturation, lightness, and alpha are\n * decimal percentages between 0 and 1\n */\n\n\nfunction parseToHsla(color) {\n  var _parseToRgba$map = parseToRgba(color).map(function (value, index) {\n    return (// 3rd index is alpha channel which is already normalized\n      index === 3 ? value : value / 255\n    );\n  }),\n      _parseToRgba$map2 = _slicedToArray(_parseToRgba$map, 4),\n      red = _parseToRgba$map2[0],\n      green = _parseToRgba$map2[1],\n      blue = _parseToRgba$map2[2],\n      alpha = _parseToRgba$map2[3];\n\n  var max = Math.max(red, green, blue);\n  var min = Math.min(red, green, blue);\n  var lightness = (max + min) / 2; // achromatic\n\n  if (max === min) return [0, 0, lightness, alpha];\n  var delta = max - min;\n  var saturation = lightness > 0.5 ? delta / (2 - max - min) : delta / (max + min);\n  var hue = 60 * (red === max ? (green - blue) / delta + (green < blue ? 6 : 0) : green === max ? (blue - red) / delta + 2 : (red - green) / delta + 4);\n  return [hue, saturation, lightness, alpha];\n}\n/**\n * Takes in hsla parts and constructs an hsla string\n *\n * @param hue The color circle (from 0 to 360) - 0 (or 360) is red, 120 is green, 240 is blue\n * @param saturation Percentage of saturation, given as a decimal between 0 and 1\n * @param lightness Percentage of lightness, given as a decimal between 0 and 1\n * @param alpha Percentage of opacity, given as a decimal between 0 and 1\n */\n\n\nfunction hsla(hue, saturation, lightness, alpha) {\n  return `hsla(${(hue % 360).toFixed()}, ${guard(0, 100, saturation * 100).toFixed()}%, ${guard(0, 100, lightness * 100).toFixed()}%, ${parseFloat(guard(0, 1, alpha).toFixed(3))})`;\n}\n/**\n * Adjusts the current hue of the color by the given degrees. Wraps around when\n * over 360.\n *\n * @param color input color\n * @param degrees degrees to adjust the input color, accepts degree integers\n * (0 - 360) and wraps around on overflow\n */\n\n\nfunction adjustHue(color, degrees) {\n  var _parseToHsla = parseToHsla(color),\n      _parseToHsla2 = _slicedToArray(_parseToHsla, 4),\n      h = _parseToHsla2[0],\n      s = _parseToHsla2[1],\n      l = _parseToHsla2[2],\n      a = _parseToHsla2[3];\n\n  return hsla(h + degrees, s, l, a);\n}\n/**\n * Darkens using lightness. This is equivalent to subtracting the lightness\n * from the L in HSL.\n *\n * @param amount The amount to darken, given as a decimal between 0 and 1\n */\n\n\nfunction darken(color, amount) {\n  var _parseToHsla = parseToHsla(color),\n      _parseToHsla2 = _slicedToArray(_parseToHsla, 4),\n      hue = _parseToHsla2[0],\n      saturation = _parseToHsla2[1],\n      lightness = _parseToHsla2[2],\n      alpha = _parseToHsla2[3];\n\n  return hsla(hue, saturation, lightness - amount, alpha);\n}\n/**\n * Desaturates the input color by the given amount via subtracting from the `s`\n * in `hsla`.\n *\n * @param amount The amount to desaturate, given as a decimal between 0 and 1\n */\n\n\nfunction desaturate(color, amount) {\n  var _parseToHsla = parseToHsla(color),\n      _parseToHsla2 = _slicedToArray(_parseToHsla, 4),\n      h = _parseToHsla2[0],\n      s = _parseToHsla2[1],\n      l = _parseToHsla2[2],\n      a = _parseToHsla2[3];\n\n  return hsla(h, s - amount, l, a);\n} // taken from:\n// https://github.com/styled-components/polished/blob/0764c982551b487469043acb56281b0358b3107b/src/color/getLuminance.js\n\n/**\n * Returns a number (float) representing the luminance of a color.\n */\n\n\nfunction getLuminance(color) {\n  if (color === 'transparent') return 0;\n\n  function f(x) {\n    var channel = x / 255;\n    return channel <= 0.03928 ? channel / 12.92 : Math.pow((channel + 0.055) / 1.055, 2.4);\n  }\n\n  var _parseToRgba = parseToRgba(color),\n      _parseToRgba2 = _slicedToArray(_parseToRgba, 3),\n      r = _parseToRgba2[0],\n      g = _parseToRgba2[1],\n      b = _parseToRgba2[2];\n\n  return 0.2126 * f(r) + 0.7152 * f(g) + 0.0722 * f(b);\n} // taken from:\n\n/**\n * Returns the contrast ratio between two colors based on\n * [W3's recommended equation for calculating contrast](http://www.w3.org/TR/WCAG20/#contrast-ratiodef).\n */\n\n\nfunction getContrast(color1, color2) {\n  var luminance1 = getLuminance(color1);\n  var luminance2 = getLuminance(color2);\n  return luminance1 > luminance2 ? (luminance1 + 0.05) / (luminance2 + 0.05) : (luminance2 + 0.05) / (luminance1 + 0.05);\n}\n/**\n * Takes in rgba parts and returns an rgba string\n *\n * @param red The amount of red in the red channel, given in a number between 0 and 255 inclusive\n * @param green The amount of green in the red channel, given in a number between 0 and 255 inclusive\n * @param blue The amount of blue in the red channel, given in a number between 0 and 255 inclusive\n * @param alpha Percentage of opacity, given as a decimal between 0 and 1\n */\n\n\nfunction rgba(red, green, blue, alpha) {\n  return `rgba(${guard(0, 255, red).toFixed()}, ${guard(0, 255, green).toFixed()}, ${guard(0, 255, blue).toFixed()}, ${parseFloat(guard(0, 1, alpha).toFixed(3))})`;\n}\n/**\n * Mixes two colors together. Taken from sass's implementation.\n */\n\n\nfunction mix(color1, color2, weight) {\n  var normalize = function normalize(n, index) {\n    return (// 3rd index is alpha channel which is already normalized\n      index === 3 ? n : n / 255\n    );\n  };\n\n  var _parseToRgba$map = parseToRgba(color1).map(normalize),\n      _parseToRgba$map2 = _slicedToArray(_parseToRgba$map, 4),\n      r1 = _parseToRgba$map2[0],\n      g1 = _parseToRgba$map2[1],\n      b1 = _parseToRgba$map2[2],\n      a1 = _parseToRgba$map2[3];\n\n  var _parseToRgba$map3 = parseToRgba(color2).map(normalize),\n      _parseToRgba$map4 = _slicedToArray(_parseToRgba$map3, 4),\n      r2 = _parseToRgba$map4[0],\n      g2 = _parseToRgba$map4[1],\n      b2 = _parseToRgba$map4[2],\n      a2 = _parseToRgba$map4[3]; // The formula is copied from the original Sass implementation:\n  // http://sass-lang.com/documentation/Sass/Script/Functions.html#mix-instance_method\n\n\n  var alphaDelta = a2 - a1;\n  var normalizedWeight = weight * 2 - 1;\n  var combinedWeight = normalizedWeight * alphaDelta === -1 ? normalizedWeight : normalizedWeight + alphaDelta / (1 + normalizedWeight * alphaDelta);\n  var weight2 = (combinedWeight + 1) / 2;\n  var weight1 = 1 - weight2;\n  var r = (r1 * weight1 + r2 * weight2) * 255;\n  var g = (g1 * weight1 + g2 * weight2) * 255;\n  var b = (b1 * weight1 + b2 * weight2) * 255;\n  var a = a2 * weight + a1 * (1 - weight);\n  return rgba(r, g, b, a);\n}\n/**\n * Given a series colors, this function will return a `scale(x)` function that\n * accepts a percentage as a decimal between 0 and 1 and returns the color at\n * that percentage in the scale.\n *\n * ```js\n * const scale = getScale('red', 'yellow', 'green');\n * console.log(scale(0)); // rgba(255, 0, 0, 1)\n * console.log(scale(0.5)); // rgba(255, 255, 0, 1)\n * console.log(scale(1)); // rgba(0, 128, 0, 1)\n * ```\n *\n * If you'd like to limit the domain and range like chroma-js, we recommend\n * wrapping scale again.\n *\n * ```js\n * const _scale = getScale('red', 'yellow', 'green');\n * const scale = x => _scale(x / 100);\n *\n * console.log(scale(0)); // rgba(255, 0, 0, 1)\n * console.log(scale(50)); // rgba(255, 255, 0, 1)\n * console.log(scale(100)); // rgba(0, 128, 0, 1)\n * ```\n */\n\n\nfunction getScale() {\n  for (var _len = arguments.length, colors = new Array(_len), _key = 0; _key < _len; _key++) {\n    colors[_key] = arguments[_key];\n  }\n\n  return function (n) {\n    var lastIndex = colors.length - 1;\n    var lowIndex = guard(0, lastIndex, Math.floor(n * lastIndex));\n    var highIndex = guard(0, lastIndex, Math.ceil(n * lastIndex));\n    var color1 = colors[lowIndex];\n    var color2 = colors[highIndex];\n    var unit = 1 / lastIndex;\n    var weight = (n - unit * lowIndex) / unit;\n    return mix(color1, color2, weight);\n  };\n}\n\nvar guidelines = {\n  decorative: 1.5,\n  readable: 3,\n  aa: 4.5,\n  aaa: 7\n};\n/**\n * Returns whether or not a color has bad contrast against a background\n * according to a given standard.\n */\n\nfunction hasBadContrast(color) {\n  var standard = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'aa';\n  var background = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '#fff';\n  return getContrast(color, background) < guidelines[standard];\n}\n/**\n * Lightens a color by a given amount. This is equivalent to\n * `darken(color, -amount)`\n *\n * @param amount The amount to darken, given as a decimal between 0 and 1\n */\n\n\nfunction lighten(color, amount) {\n  return darken(color, -amount);\n}\n/**\n * Takes in a color and makes it more transparent by convert to `rgba` and\n * decreasing the amount in the alpha channel.\n *\n * @param amount The amount to increase the transparency by, given as a decimal between 0 and 1\n */\n\n\nfunction transparentize(color, amount) {\n  var _parseToRgba = parseToRgba(color),\n      _parseToRgba2 = _slicedToArray(_parseToRgba, 4),\n      r = _parseToRgba2[0],\n      g = _parseToRgba2[1],\n      b = _parseToRgba2[2],\n      a = _parseToRgba2[3];\n\n  return rgba(r, g, b, a - amount);\n}\n/**\n * Takes a color and un-transparentizes it. Equivalent to\n * `transparentize(color, -amount)`\n *\n * @param amount The amount to increase the opacity by, given as a decimal between 0 and 1\n */\n\n\nfunction opacify(color, amount) {\n  return transparentize(color, -amount);\n}\n/**\n * An alternative function to `readableColor`. Returns whether or not the \n * readable color (i.e. the color to be place on top the input color) should be\n * black.\n */\n\n\nfunction readableColorIsBlack(color) {\n  return getLuminance(color) > 0.179;\n}\n/**\n * Returns black or white for best contrast depending on the luminosity of the\n * given color.\n */\n\n\nfunction readableColor(color) {\n  return readableColorIsBlack(color) ? '#000' : '#fff';\n}\n/**\n * Saturates a color by converting it to `hsl` and increasing the saturation\n * amount. Equivalent to `desaturate(color, -amount)`\n * \n * @param color Input color\n * @param amount The amount to darken, given as a decimal between 0 and 1\n */\n\n\nfunction saturate(color, amount) {\n  return desaturate(color, -amount);\n}\n/**\n * Takes in any color and returns it as a hex code.\n */\n\n\nfunction toHex(color) {\n  var _parseToRgba = parseToRgba(color),\n      _parseToRgba2 = _slicedToArray(_parseToRgba, 4),\n      r = _parseToRgba2[0],\n      g = _parseToRgba2[1],\n      b = _parseToRgba2[2],\n      a = _parseToRgba2[3];\n\n  var hex = function hex(x) {\n    var h = guard(0, 255, x).toString(16); // NOTE: padStart could be used here but it breaks Node 6 compat\n    // https://github.com/ricokahler/color2k/issues/351\n\n    return h.length === 1 ? `0${h}` : h;\n  };\n\n  return `#${hex(r)}${hex(g)}${hex(b)}${a < 1 ? hex(Math.round(a * 255)) : ''}`;\n}\n/**\n * Takes in any color and returns it as an rgba string.\n */\n\n\nfunction toRgba(color) {\n  return rgba.apply(void 0, _toConsumableArray(parseToRgba(color)));\n}\n/**\n * Takes in any color and returns it as an hsla string.\n */\n\n\nfunction toHsla(color) {\n  return hsla.apply(void 0, _toConsumableArray(parseToHsla(color)));\n}\n\nexports.ColorError = ColorError$1;\nexports.adjustHue = adjustHue;\nexports.darken = darken;\nexports.desaturate = desaturate;\nexports.getContrast = getContrast;\nexports.getLuminance = getLuminance;\nexports.getScale = getScale;\nexports.guard = guard;\nexports.hasBadContrast = hasBadContrast;\nexports.hsla = hsla;\nexports.lighten = lighten;\nexports.mix = mix;\nexports.opacify = opacify;\nexports.parseToHsla = parseToHsla;\nexports.parseToRgba = parseToRgba;\nexports.readableColor = readableColor;\nexports.readableColorIsBlack = readableColorIsBlack;\nexports.rgba = rgba;\nexports.saturate = saturate;\nexports.toHex = toHex;\nexports.toHsla = toHsla;\nexports.toRgba = toRgba;\nexports.transparentize = transparentize;","map":{"version":3,"sources":["../src/guard.ts","../src/ColorError.ts","../src/parseToRgba.ts","../src/parseToHsla.ts","../src/hsla.ts","../src/adjustHue.ts","../src/darken.ts","../src/desaturate.ts","../src/getLuminance.ts","../src/getContrast.ts","../src/rgba.ts","../src/mix.ts","../src/getScale.ts","../src/hasBadContrast.ts","../src/lighten.ts","../src/transparentize.ts","../src/opacify.ts","../src/readableColorIsBlack.ts","../src/readableColor.ts","../src/saturate.ts","../src/toHex.ts","../src/toRgba.ts","../src/toHsla.ts"],"names":["guard","low","high","value","Math","min","max","ColorError","Error","color","parseToRgba","trim","toLowerCase","normalizedColor","namedColorRegex","test","nameToHex","reducedHexMatch","reducedHexRegex","exec","arr","Array","from","slice","map","x","parseInt","r","hexMatch","hexRegex","rgbaMatch","rgbaRegex","parseFloat","hslaMatch","hslaRegex","h","s","l","a","hslToRgb","Number","isNaN","hash","str","i","length","charCodeAt","colorToInt","replace","compressedColorMap","split","reduce","acc","next","key","substring","hex","toString","prefix","normalizedColorName","result","amount","join","RegExp","roundColor","round","hue","saturation","lightness","huePrime","chroma","abs","secondComponent","red","green","blue","lightnessModification","finalRed","finalGreen","finalBlue","parseToHsla","alpha","index","delta","hsla","toFixed","adjustHue","degrees","darken","desaturate","getLuminance","f","channel","pow","g","b","getContrast","color1","color2","luminance1","luminance2","rgba","mix","weight","normalize","n","r1","g1","b1","a1","r2","g2","b2","a2","alphaDelta","normalizedWeight","combinedWeight","weight2","weight1","getScale","colors","lastIndex","lowIndex","floor","highIndex","ceil","unit","guidelines","decorative","readable","aa","aaa","hasBadContrast","standard","background","lighten","transparentize","opacify","readableColorIsBlack","readableColor","saturate","toHex","toRgba","toHsla"],"mappings":"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","sourcesContent":["/**\n * A simple guard function:\n *\n * ```js\n * Math.min(Math.max(low, value), high)\n * ```\n */\nfunction guard(low: number, high: number, value: number): number {\n  return Math.min(Math.max(low, value), high);\n}\n\nexport default guard;\n","class ColorError extends Error {\n  constructor(color: string) {\n    super(`Failed to parse color: \"${color}\"`);\n  }\n}\n\nexport default ColorError;\n","import guard from './guard';\nimport ColorError from './ColorError';\n\n/**\n * Parses a color into red, gree, blue, alpha parts\n *\n * @param color the input color. Can be a RGB, RBGA, HSL, HSLA, or named color\n */\nfunction parseToRgba(color: string): [number, number, number, number] {\n  if (typeof color !== 'string') throw new ColorError(color);\n  if (color.trim().toLowerCase() === 'transparent') return [0, 0, 0, 0];\n\n  let normalizedColor = color.trim();\n  normalizedColor = namedColorRegex.test(color) ? nameToHex(color) : color;\n\n  const reducedHexMatch = reducedHexRegex.exec(normalizedColor);\n  if (reducedHexMatch) {\n    const arr = Array.from(reducedHexMatch).slice(1);\n    return [\n      ...arr.slice(0, 3).map((x) => parseInt(r(x, 2), 16)),\n      parseInt(r(arr[3] || 'f', 2), 16) / 255,\n    ] as [number, number, number, number];\n  }\n\n  const hexMatch = hexRegex.exec(normalizedColor);\n  if (hexMatch) {\n    const arr = Array.from(hexMatch).slice(1);\n    return [\n      ...arr.slice(0, 3).map((x) => parseInt(x, 16)),\n      parseInt(arr[3] || 'ff', 16) / 255,\n    ] as [number, number, number, number];\n  }\n\n  const rgbaMatch = rgbaRegex.exec(normalizedColor);\n  if (rgbaMatch) {\n    const arr = Array.from(rgbaMatch).slice(1);\n    return [\n      ...arr.slice(0, 3).map((x) => parseInt(x, 10)),\n      parseFloat(arr[3] || '1'),\n    ] as [number, number, number, number];\n  }\n\n  const hslaMatch = hslaRegex.exec(normalizedColor);\n  if (hslaMatch) {\n    const [h, s, l, a] = Array.from(hslaMatch).slice(1).map(parseFloat);\n    if (guard(0, 100, s) !== s) throw new ColorError(color);\n    if (guard(0, 100, l) !== l) throw new ColorError(color);\n    return [...hslToRgb(h, s, l), Number.isNaN(a) ? 1 : a] as [\n      number,\n      number,\n      number,\n      number\n    ];\n  }\n\n  throw new ColorError(color);\n}\n\nfunction hash(str: string) {\n  let hash = 5381;\n  let i = str.length;\n\n  while (i) {\n    hash = (hash * 33) ^ str.charCodeAt(--i);\n  }\n\n  /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed\n   * integers. Since we want the results to be always positive, convert the\n   * signed int to an unsigned by doing an unsigned bitshift. */\n  return (hash >>> 0) % 2341;\n}\n\nconst colorToInt = (x: string) => parseInt(x.replace(/_/g, ''), 36);\n\nconst compressedColorMap =\n  '1q29ehhb 1n09sgk7 1kl1ekf_ _yl4zsno 16z9eiv3 1p29lhp8 _bd9zg04 17u0____ _iw9zhe5 _to73___ _r45e31e _7l6g016 _jh8ouiv _zn3qba8 1jy4zshs 11u87k0u 1ro9yvyo 1aj3xael 1gz9zjz0 _3w8l4xo 1bf1ekf_ _ke3v___ _4rrkb__ 13j776yz _646mbhl _nrjr4__ _le6mbhl 1n37ehkb _m75f91n _qj3bzfz 1939yygw 11i5z6x8 _1k5f8xs 1509441m 15t5lwgf _ae2th1n _tg1ugcv 1lp1ugcv 16e14up_ _h55rw7n _ny9yavn _7a11xb_ 1ih442g9 _pv442g9 1mv16xof 14e6y7tu 1oo9zkds 17d1cisi _4v9y70f _y98m8kc 1019pq0v 12o9zda8 _348j4f4 1et50i2o _8epa8__ _ts6senj 1o350i2o 1mi9eiuo 1259yrp0 1ln80gnw _632xcoy 1cn9zldc _f29edu4 1n490c8q _9f9ziet 1b94vk74 _m49zkct 1kz6s73a 1eu9dtog _q58s1rz 1dy9sjiq __u89jo3 _aj5nkwg _ld89jo3 13h9z6wx _qa9z2ii _l119xgq _bs5arju 1hj4nwk9 1qt4nwk9 1ge6wau6 14j9zlcw 11p1edc_ _ms1zcxe _439shk6 _jt9y70f _754zsow 1la40eju _oq5p___ _x279qkz 1fa5r3rv _yd2d9ip _424tcku _8y1di2_ _zi2uabw _yy7rn9h 12yz980_ __39ljp6 1b59zg0x _n39zfzp 1fy9zest _b33k___ _hp9wq92 1il50hz4 _io472ub _lj9z3eo 19z9ykg0 _8t8iu3a 12b9bl4a 1ak5yw0o _896v4ku _tb8k8lv _s59zi6t _c09ze0p 1lg80oqn 1id9z8wb _238nba5 1kq6wgdi _154zssg _tn3zk49 _da9y6tc 1sg7cv4f _r12jvtt 1gq5fmkz 1cs9rvci _lp9jn1c _xw1tdnb 13f9zje6 16f6973h _vo7ir40 _bt5arjf _rc45e4t _hr4e100 10v4e100 _hc9zke2 _w91egv_ _sj2r1kk 13c87yx8 _vqpds__ _ni8ggk8 _tj9yqfb 1ia2j4r4 _7x9b10u 1fc9ld4j 1eq9zldr _5j9lhpx _ez9zl6o _md61fzm'\n    .split(' ')\n    .reduce((acc, next) => {\n      const key = colorToInt(next.substring(0, 3));\n      const hex = colorToInt(next.substring(3)).toString(16);\n\n      // NOTE: padStart could be used here but it breaks Node 6 compat\n      // https://github.com/ricokahler/color2k/issues/351\n      let prefix = '';\n      for (let i = 0; i < 6 - hex.length; i++) {\n        prefix += '0';\n      }\n\n      acc[key] = `${prefix}${hex}`;\n      return acc;\n    }, {} as { [key: string]: string });\n\n/**\n * Checks if a string is a CSS named color and returns its equivalent hex value, otherwise returns the original color.\n */\nfunction nameToHex(color: string): string {\n  const normalizedColorName = color.toLowerCase().trim();\n  const result = compressedColorMap[hash(normalizedColorName)];\n  if (!result) throw new ColorError(color);\n  return `#${result}`;\n}\n\nconst r = (str: string, amount: number) =>\n  Array.from(Array(amount))\n    .map(() => str)\n    .join('');\n\nconst reducedHexRegex = new RegExp(`^#${r('([a-f0-9])', 3)}([a-f0-9])?$`, 'i');\nconst hexRegex = new RegExp(`^#${r('([a-f0-9]{2})', 3)}([a-f0-9]{2})?$`, 'i');\nconst rgbaRegex = new RegExp(\n  `^rgba?\\\\(\\\\s*(\\\\d+)\\\\s*${r(\n    ',\\\\s*(\\\\d+)\\\\s*',\n    2\n  )}(?:,\\\\s*([\\\\d.]+))?\\\\s*\\\\)$`,\n  'i'\n);\nconst hslaRegex =\n  /^hsla?\\(\\s*([\\d.]+)\\s*,\\s*([\\d.]+)%\\s*,\\s*([\\d.]+)%(?:\\s*,\\s*([\\d.]+))?\\s*\\)$/i;\nconst namedColorRegex = /^[a-z]+$/i;\n\nconst roundColor = (color: number): number => {\n  return Math.round(color * 255);\n};\n\nconst hslToRgb = (\n  hue: number,\n  saturation: number,\n  lightness: number\n): [number, number, number] => {\n  let l = lightness / 100;\n  if (saturation === 0) {\n    // achromatic\n    return [l, l, l].map(roundColor) as [number, number, number];\n  }\n\n  // formulae from https://en.wikipedia.org/wiki/HSL_and_HSV\n  const huePrime = (((hue % 360) + 360) % 360) / 60;\n  const chroma = (1 - Math.abs(2 * l - 1)) * (saturation / 100);\n  const secondComponent = chroma * (1 - Math.abs((huePrime % 2) - 1));\n\n  let red = 0;\n  let green = 0;\n  let blue = 0;\n\n  if (huePrime >= 0 && huePrime < 1) {\n    red = chroma;\n    green = secondComponent;\n  } else if (huePrime >= 1 && huePrime < 2) {\n    red = secondComponent;\n    green = chroma;\n  } else if (huePrime >= 2 && huePrime < 3) {\n    green = chroma;\n    blue = secondComponent;\n  } else if (huePrime >= 3 && huePrime < 4) {\n    green = secondComponent;\n    blue = chroma;\n  } else if (huePrime >= 4 && huePrime < 5) {\n    red = secondComponent;\n    blue = chroma;\n  } else if (huePrime >= 5 && huePrime < 6) {\n    red = chroma;\n    blue = secondComponent;\n  }\n\n  const lightnessModification = l - chroma / 2;\n  const finalRed = red + lightnessModification;\n  const finalGreen = green + lightnessModification;\n  const finalBlue = blue + lightnessModification;\n\n  return [finalRed, finalGreen, finalBlue].map(roundColor) as [\n    number,\n    number,\n    number\n  ];\n};\n\nexport default parseToRgba;\n","// taken from:\n// https://github.com/styled-components/polished/blob/a23a6a2bb26802b3d922d9c3b67bac3f3a54a310/src/internalHelpers/_rgbToHsl.js\nimport parseToRgba from './parseToRgba';\n\n/**\n * Parses a color in hue, saturation, lightness, and the alpha channel.\n *\n * Hue is a number between 0 and 360, saturation, lightness, and alpha are\n * decimal percentages between 0 and 1\n */\nfunction parseToHsla(color: string): [number, number, number, number] {\n  const [red, green, blue, alpha] = parseToRgba(color).map((value, index) =>\n    // 3rd index is alpha channel which is already normalized\n    index === 3 ? value : value / 255\n  );\n\n  const max = Math.max(red, green, blue);\n  const min = Math.min(red, green, blue);\n  const lightness = (max + min) / 2;\n\n  // achromatic\n  if (max === min) return [0, 0, lightness, alpha];\n\n  const delta = max - min;\n  const saturation =\n    lightness > 0.5 ? delta / (2 - max - min) : delta / (max + min);\n\n  const hue =\n    60 *\n    (red === max\n      ? (green - blue) / delta + (green < blue ? 6 : 0)\n      : green === max\n      ? (blue - red) / delta + 2\n      : (red - green) / delta + 4);\n\n  return [hue, saturation, lightness, alpha];\n}\n\nexport default parseToHsla;\n","import guard from './guard';\n\n/**\n * Takes in hsla parts and constructs an hsla string\n *\n * @param hue The color circle (from 0 to 360) - 0 (or 360) is red, 120 is green, 240 is blue\n * @param saturation Percentage of saturation, given as a decimal between 0 and 1\n * @param lightness Percentage of lightness, given as a decimal between 0 and 1\n * @param alpha Percentage of opacity, given as a decimal between 0 and 1\n */\nfunction hsla(\n  hue: number,\n  saturation: number,\n  lightness: number,\n  alpha: number\n): string {\n  return `hsla(${(hue % 360).toFixed()}, ${guard(\n    0,\n    100,\n    saturation * 100\n  ).toFixed()}%, ${guard(0, 100, lightness * 100).toFixed()}%, ${parseFloat(\n    guard(0, 1, alpha).toFixed(3)\n  )})`;\n}\n\nexport default hsla;\n","import parseToHsla from './parseToHsla';\nimport hsla from './hsla';\n\n/**\n * Adjusts the current hue of the color by the given degrees. Wraps around when\n * over 360.\n *\n * @param color input color\n * @param degrees degrees to adjust the input color, accepts degree integers\n * (0 - 360) and wraps around on overflow\n */\nfunction adjustHue(color: string, degrees: number): string {\n  const [h, s, l, a] = parseToHsla(color);\n  return hsla(h + degrees, s, l, a);\n}\n\nexport default adjustHue;\n","import parseToHsla from './parseToHsla';\nimport hsla from './hsla';\n\n/**\n * Darkens using lightness. This is equivalent to subtracting the lightness\n * from the L in HSL.\n *\n * @param amount The amount to darken, given as a decimal between 0 and 1\n */\nfunction darken(color: string, amount: number): string {\n  const [hue, saturation, lightness, alpha] = parseToHsla(color);\n  return hsla(hue, saturation, lightness - amount, alpha);\n}\n\nexport default darken;\n","import parseToHsla from './parseToHsla';\nimport hsla from './hsla';\n\n/**\n * Desaturates the input color by the given amount via subtracting from the `s`\n * in `hsla`.\n *\n * @param amount The amount to desaturate, given as a decimal between 0 and 1\n */\nfunction desaturate(color: string, amount: number): string {\n  const [h, s, l, a] = parseToHsla(color);\n  return hsla(h, s - amount, l, a);\n}\n\nexport default desaturate;\n","import parseToRgba from './parseToRgba';\n// taken from:\n// https://github.com/styled-components/polished/blob/0764c982551b487469043acb56281b0358b3107b/src/color/getLuminance.js\n\n/**\n * Returns a number (float) representing the luminance of a color.\n */\nfunction getLuminance(color: string): number {\n  if (color === 'transparent') return 0;\n\n  function f(x: number) {\n    const channel = x / 255;\n    return channel <= 0.03928\n      ? channel / 12.92\n      : Math.pow(((channel + 0.055) / 1.055), 2.4);\n  }\n\n  const [r, g, b] = parseToRgba(color);\n  return 0.2126 * f(r) + 0.7152 * f(g) + 0.0722 * f(b);\n}\n\nexport default getLuminance;\n","// taken from:\n// https://github.com/styled-components/polished/blob/0764c982551b487469043acb56281b0358b3107b/src/color/getContrast.js\nimport getLuminance from './getLuminance';\n\n/**\n * Returns the contrast ratio between two colors based on\n * [W3's recommended equation for calculating contrast](http://www.w3.org/TR/WCAG20/#contrast-ratiodef).\n */\nfunction getContrast(color1: string, color2: string): number {\n  const luminance1 = getLuminance(color1);\n  const luminance2 = getLuminance(color2);\n\n  return luminance1 > luminance2\n    ? (luminance1 + 0.05) / (luminance2 + 0.05)\n    : (luminance2 + 0.05) / (luminance1 + 0.05);\n}\n\nexport default getContrast;\n","import guard from './guard';\n\n/**\n * Takes in rgba parts and returns an rgba string\n *\n * @param red The amount of red in the red channel, given in a number between 0 and 255 inclusive\n * @param green The amount of green in the red channel, given in a number between 0 and 255 inclusive\n * @param blue The amount of blue in the red channel, given in a number between 0 and 255 inclusive\n * @param alpha Percentage of opacity, given as a decimal between 0 and 1\n */\nfunction rgba(red: number, green: number, blue: number, alpha: number): string {\n  return `rgba(${guard(0, 255, red).toFixed()}, ${guard(\n    0,\n    255,\n    green\n  ).toFixed()}, ${guard(0, 255, blue).toFixed()}, ${parseFloat(\n    guard(0, 1, alpha).toFixed(3)\n  )})`;\n}\n\nexport default rgba;\n","import parseToRgba from './parseToRgba';\nimport rgba from './rgba';\n\n/**\n * Mixes two colors together. Taken from sass's implementation.\n */\nfunction mix(color1: string, color2: string, weight: number): string {\n  const normalize = (n: number, index: number) =>\n    // 3rd index is alpha channel which is already normalized\n    index === 3 ? n : n / 255;\n\n  const [r1, g1, b1, a1] = parseToRgba(color1).map(normalize);\n  const [r2, g2, b2, a2] = parseToRgba(color2).map(normalize);\n\n  // The formula is copied from the original Sass implementation:\n  // http://sass-lang.com/documentation/Sass/Script/Functions.html#mix-instance_method\n  const alphaDelta = a2 - a1;\n  const normalizedWeight = weight * 2 - 1;\n  const combinedWeight =\n    normalizedWeight * alphaDelta === -1\n      ? normalizedWeight\n      : normalizedWeight + alphaDelta / (1 + normalizedWeight * alphaDelta);\n  const weight2 = (combinedWeight + 1) / 2;\n  const weight1 = 1 - weight2;\n\n  const r = (r1 * weight1 + r2 * weight2) * 255;\n  const g = (g1 * weight1 + g2 * weight2) * 255;\n  const b = (b1 * weight1 + b2 * weight2) * 255;\n  const a = a2 * weight + a1 * (1 - weight);\n\n  return rgba(r, g, b, a);\n}\n\nexport default mix;\n","import mix from './mix';\nimport guard from './guard';\n\n/**\n * Given a series colors, this function will return a `scale(x)` function that\n * accepts a percentage as a decimal between 0 and 1 and returns the color at\n * that percentage in the scale.\n *\n * ```js\n * const scale = getScale('red', 'yellow', 'green');\n * console.log(scale(0)); // rgba(255, 0, 0, 1)\n * console.log(scale(0.5)); // rgba(255, 255, 0, 1)\n * console.log(scale(1)); // rgba(0, 128, 0, 1)\n * ```\n *\n * If you'd like to limit the domain and range like chroma-js, we recommend\n * wrapping scale again.\n *\n * ```js\n * const _scale = getScale('red', 'yellow', 'green');\n * const scale = x => _scale(x / 100);\n *\n * console.log(scale(0)); // rgba(255, 0, 0, 1)\n * console.log(scale(50)); // rgba(255, 255, 0, 1)\n * console.log(scale(100)); // rgba(0, 128, 0, 1)\n * ```\n */\nfunction getScale(...colors: string[]): (n: number) => string {\n  return (n) => {\n    const lastIndex = colors.length - 1;\n    const lowIndex = guard(0, lastIndex, Math.floor(n * lastIndex));\n    const highIndex = guard(0, lastIndex, Math.ceil(n * lastIndex));\n\n    const color1 = colors[lowIndex];\n    const color2 = colors[highIndex];\n\n    const unit = 1 / lastIndex;\n    const weight = (n - unit * lowIndex) / unit;\n\n    return mix(color1, color2, weight);\n  };\n}\n\nexport default getScale;\n","import getContrast from './getContrast';\n\nconst guidelines = {\n  decorative: 1.5,\n  readable: 3,\n  aa: 4.5,\n  aaa: 7,\n};\n\n/**\n * Returns whether or not a color has bad contrast against a background\n * according to a given standard.\n */\nfunction hasBadContrast(\n  color: string,\n  standard: 'decorative' | 'readable' | 'aa' | 'aaa' = 'aa',\n  background: string = '#fff'\n): boolean {\n  return getContrast(color, background) < guidelines[standard];\n}\n\nexport default hasBadContrast;\n","import darken from './darken';\n/**\n * Lightens a color by a given amount. This is equivalent to\n * `darken(color, -amount)`\n *\n * @param amount The amount to darken, given as a decimal between 0 and 1\n */\nfunction lighten(color: string, amount: number): string {\n  return darken(color, -amount);\n}\n\nexport default lighten;\n","import parseToRgba from './parseToRgba';\nimport rgba from './rgba';\n\n/**\n * Takes in a color and makes it more transparent by convert to `rgba` and\n * decreasing the amount in the alpha channel.\n *\n * @param amount The amount to increase the transparency by, given as a decimal between 0 and 1\n */\nfunction transparentize(color: string, amount: number): string {\n  const [r, g, b, a] = parseToRgba(color);\n  return rgba(r, g, b, a - amount);\n}\n\nexport default transparentize;\n","import transparentize from './transparentize';\n\n/**\n * Takes a color and un-transparentizes it. Equivalent to\n * `transparentize(color, -amount)`\n *\n * @param amount The amount to increase the opacity by, given as a decimal between 0 and 1\n */\nfunction opacify(color: string, amount: number): string {\n  return transparentize(color, -amount);\n}\n\nexport default opacify;\n","import getLuminance from './getLuminance';\n\n/**\n * An alternative function to `readableColor`. Returns whether or not the \n * readable color (i.e. the color to be place on top the input color) should be\n * black.\n */\nfunction readableColorIsBlack(color: string): boolean {\n  return getLuminance(color) > 0.179;\n}\n\nexport default readableColorIsBlack;\n","import readableColorIsBlack from './readableColorIsBlack';\n\n/**\n * Returns black or white for best contrast depending on the luminosity of the\n * given color.\n */\nfunction readableColor(color: string): string {\n  return readableColorIsBlack(color) ? '#000' : '#fff';\n}\n\nexport default readableColor;\n","import desaturate from './desaturate';\n\n/**\n * Saturates a color by converting it to `hsl` and increasing the saturation\n * amount. Equivalent to `desaturate(color, -amount)`\n * \n * @param color Input color\n * @param amount The amount to darken, given as a decimal between 0 and 1\n */\nfunction saturate(color: string, amount: number): string {\n  return desaturate(color, -amount);\n}\n\nexport default saturate;\n","import parseToRgba from './parseToRgba';\nimport guard from './guard';\n\n/**\n * Takes in any color and returns it as a hex code.\n */\nfunction toHex(color: string): string {\n  const [r, g, b, a] = parseToRgba(color);\n\n  let hex = (x: number) => {\n    const h = guard(0, 255, x).toString(16);\n    // NOTE: padStart could be used here but it breaks Node 6 compat\n    // https://github.com/ricokahler/color2k/issues/351\n    return h.length === 1 ? `0${h}` : h;\n  };\n\n  return `#${hex(r)}${hex(g)}${hex(b)}${a < 1 ? hex(Math.round(a * 255)) : ''}`;\n}\n\nexport default toHex;\n","import parseToRgba from './parseToRgba';\nimport rgba from './rgba';\n\n/**\n * Takes in any color and returns it as an rgba string.\n */\nfunction toRgba(color: string): string {\n  return rgba(...parseToRgba(color));\n}\n\nexport default toRgba;\n","import parseToHsla from './parseToHsla';\nimport hsla from './hsla';\n\n/**\n * Takes in any color and returns it as an hsla string.\n */\nfunction toHsla(color: string): string {\n  return hsla(...parseToHsla(color));\n}\n\nexport default toHsla;\n"]},"metadata":{},"sourceType":"script"}