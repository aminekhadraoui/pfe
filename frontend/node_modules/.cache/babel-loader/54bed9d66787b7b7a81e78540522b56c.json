{"ast":null,"code":"import { useContext } from 'react';\nimport { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { resolveVariantFromProps } from '../../render/utils/resolve-variants.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { MotionContext } from '../../context/MotionContext/index.mjs';\nimport { isControllingVariants, isVariantNode } from '../../render/utils/is-controlling-variants.mjs';\n\nfunction makeState({\n  scrapeMotionValuesFromProps,\n  createRenderState,\n  onMount\n}, props, context, presenceContext) {\n  const state = {\n    latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps),\n    renderState: createRenderState()\n  };\n\n  if (onMount) {\n    state.mount = instance => onMount(props, instance, state);\n  }\n\n  return state;\n}\n\nconst makeUseVisualState = config => (props, isStatic) => {\n  const context = useContext(MotionContext);\n  const presenceContext = useContext(PresenceContext);\n\n  const make = () => makeState(config, props, context, presenceContext);\n\n  return isStatic ? make() : useConstant(make);\n};\n\nfunction makeLatestValues(props, context, presenceContext, scrapeMotionValues) {\n  const values = {};\n  const motionValues = scrapeMotionValues(props, {});\n\n  for (const key in motionValues) {\n    values[key] = resolveMotionValue(motionValues[key]);\n  }\n\n  let {\n    initial,\n    animate\n  } = props;\n  const isControllingVariants$1 = isControllingVariants(props);\n  const isVariantNode$1 = isVariantNode(props);\n\n  if (context && isVariantNode$1 && !isControllingVariants$1 && props.inherit !== false) {\n    if (initial === undefined) initial = context.initial;\n    if (animate === undefined) animate = context.animate;\n  }\n\n  let isInitialAnimationBlocked = presenceContext ? presenceContext.initial === false : false;\n  isInitialAnimationBlocked = isInitialAnimationBlocked || initial === false;\n  const variantToSet = isInitialAnimationBlocked ? animate : initial;\n\n  if (variantToSet && typeof variantToSet !== \"boolean\" && !isAnimationControls(variantToSet)) {\n    const list = Array.isArray(variantToSet) ? variantToSet : [variantToSet];\n    list.forEach(definition => {\n      const resolved = resolveVariantFromProps(props, definition);\n      if (!resolved) return;\n      const {\n        transitionEnd,\n        transition,\n        ...target\n      } = resolved;\n\n      for (const key in target) {\n        let valueTarget = target[key];\n\n        if (Array.isArray(valueTarget)) {\n          /**\n           * Take final keyframe if the initial animation is blocked because\n           * we want to initialise at the end of that blocked animation.\n           */\n          const index = isInitialAnimationBlocked ? valueTarget.length - 1 : 0;\n          valueTarget = valueTarget[index];\n        }\n\n        if (valueTarget !== null) {\n          values[key] = valueTarget;\n        }\n      }\n\n      for (const key in transitionEnd) values[key] = transitionEnd[key];\n    });\n  }\n\n  return values;\n}\n\nexport { makeUseVisualState };","map":{"version":3,"sources":["C:/Users/HP/Desktop/pfe/node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs"],"names":["useContext","isAnimationControls","PresenceContext","resolveVariantFromProps","useConstant","resolveMotionValue","MotionContext","isControllingVariants","isVariantNode","makeState","scrapeMotionValuesFromProps","createRenderState","onMount","props","context","presenceContext","state","latestValues","makeLatestValues","renderState","mount","instance","makeUseVisualState","config","isStatic","make","scrapeMotionValues","values","motionValues","key","initial","animate","isControllingVariants$1","isVariantNode$1","inherit","undefined","isInitialAnimationBlocked","variantToSet","list","Array","isArray","forEach","definition","resolved","transitionEnd","transition","target","valueTarget","index","length"],"mappings":"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","sourcesContent":["import { useContext } from 'react';\nimport { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { resolveVariantFromProps } from '../../render/utils/resolve-variants.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { MotionContext } from '../../context/MotionContext/index.mjs';\nimport { isControllingVariants, isVariantNode } from '../../render/utils/is-controlling-variants.mjs';\n\nfunction makeState({ scrapeMotionValuesFromProps, createRenderState, onMount, }, props, context, presenceContext) {\n    const state = {\n        latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps),\n        renderState: createRenderState(),\n    };\n    if (onMount) {\n        state.mount = (instance) => onMount(props, instance, state);\n    }\n    return state;\n}\nconst makeUseVisualState = (config) => (props, isStatic) => {\n    const context = useContext(MotionContext);\n    const presenceContext = useContext(PresenceContext);\n    const make = () => makeState(config, props, context, presenceContext);\n    return isStatic ? make() : useConstant(make);\n};\nfunction makeLatestValues(props, context, presenceContext, scrapeMotionValues) {\n    const values = {};\n    const motionValues = scrapeMotionValues(props, {});\n    for (const key in motionValues) {\n        values[key] = resolveMotionValue(motionValues[key]);\n    }\n    let { initial, animate } = props;\n    const isControllingVariants$1 = isControllingVariants(props);\n    const isVariantNode$1 = isVariantNode(props);\n    if (context &&\n        isVariantNode$1 &&\n        !isControllingVariants$1 &&\n        props.inherit !== false) {\n        if (initial === undefined)\n            initial = context.initial;\n        if (animate === undefined)\n            animate = context.animate;\n    }\n    let isInitialAnimationBlocked = presenceContext\n        ? presenceContext.initial === false\n        : false;\n    isInitialAnimationBlocked = isInitialAnimationBlocked || initial === false;\n    const variantToSet = isInitialAnimationBlocked ? animate : initial;\n    if (variantToSet &&\n        typeof variantToSet !== \"boolean\" &&\n        !isAnimationControls(variantToSet)) {\n        const list = Array.isArray(variantToSet) ? variantToSet : [variantToSet];\n        list.forEach((definition) => {\n            const resolved = resolveVariantFromProps(props, definition);\n            if (!resolved)\n                return;\n            const { transitionEnd, transition, ...target } = resolved;\n            for (const key in target) {\n                let valueTarget = target[key];\n                if (Array.isArray(valueTarget)) {\n                    /**\n                     * Take final keyframe if the initial animation is blocked because\n                     * we want to initialise at the end of that blocked animation.\n                     */\n                    const index = isInitialAnimationBlocked\n                        ? valueTarget.length - 1\n                        : 0;\n                    valueTarget = valueTarget[index];\n                }\n                if (valueTarget !== null) {\n                    values[key] = valueTarget;\n                }\n            }\n            for (const key in transitionEnd)\n                values[key] = transitionEnd[key];\n        });\n    }\n    return values;\n}\n\nexport { makeUseVisualState };\n"]},"metadata":{},"sourceType":"module"}