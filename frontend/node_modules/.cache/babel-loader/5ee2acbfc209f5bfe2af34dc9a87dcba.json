{"ast":null,"code":"// src/extend-theme.ts\nimport { theme, baseTheme, isChakraTheme } from \"@chakra-ui/theme\";\nimport mergeWith from \"lodash.mergewith\";\n\nfunction isFunction(value) {\n  return typeof value === \"function\";\n}\n\nfunction pipe(...fns) {\n  return v => fns.reduce((a, b) => b(a), v);\n}\n\nvar createExtendTheme = theme2 => {\n  return function extendTheme2(...extensions) {\n    let overrides = [...extensions];\n    let activeTheme = extensions[extensions.length - 1];\n\n    if (isChakraTheme(activeTheme) && overrides.length > 1) {\n      overrides = overrides.slice(0, overrides.length - 1);\n    } else {\n      activeTheme = theme2;\n    }\n\n    return pipe(...overrides.map(extension => prevTheme => isFunction(extension) ? extension(prevTheme) : mergeThemeOverride(prevTheme, extension)))(activeTheme);\n  };\n};\n\nvar extendTheme = createExtendTheme(theme);\nvar extendBaseTheme = createExtendTheme(baseTheme);\n\nfunction mergeThemeOverride(...overrides) {\n  return mergeWith({}, ...overrides, mergeThemeCustomizer);\n}\n\nfunction mergeThemeCustomizer(source, override, key, object) {\n  if ((isFunction(source) || isFunction(override)) && Object.prototype.hasOwnProperty.call(object, key)) {\n    return (...args) => {\n      const sourceValue = isFunction(source) ? source(...args) : source;\n      const overrideValue = isFunction(override) ? override(...args) : override;\n      return mergeWith({}, sourceValue, overrideValue, mergeThemeCustomizer);\n    };\n  }\n\n  return void 0;\n}\n\nexport { extendTheme, extendBaseTheme, mergeThemeOverride };","map":{"version":3,"sources":["C:/Users/HP/Desktop/pfe/node_modules/@chakra-ui/theme-utils/dist/chunk-AQYX3YP4.mjs"],"names":["theme","baseTheme","isChakraTheme","mergeWith","isFunction","value","pipe","fns","v","reduce","a","b","createExtendTheme","theme2","extendTheme2","extensions","overrides","activeTheme","length","slice","map","extension","prevTheme","mergeThemeOverride","extendTheme","extendBaseTheme","mergeThemeCustomizer","source","override","key","object","Object","prototype","hasOwnProperty","call","args","sourceValue","overrideValue"],"mappings":"AAAA;AACA,SACEA,KADF,EAEEC,SAFF,EAGEC,aAHF,QAIO,kBAJP;AAKA,OAAOC,SAAP,MAAsB,kBAAtB;;AACA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AACzB,SAAO,OAAOA,KAAP,KAAiB,UAAxB;AACD;;AACD,SAASC,IAAT,CAAc,GAAGC,GAAjB,EAAsB;AACpB,SAAQC,CAAD,IAAOD,GAAG,CAACE,MAAJ,CAAW,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACD,CAAD,CAAtB,EAA2BF,CAA3B,CAAd;AACD;;AACD,IAAII,iBAAiB,GAAIC,MAAD,IAAY;AAClC,SAAO,SAASC,YAAT,CAAsB,GAAGC,UAAzB,EAAqC;AAC1C,QAAIC,SAAS,GAAG,CAAC,GAAGD,UAAJ,CAAhB;AACA,QAAIE,WAAW,GAAGF,UAAU,CAACA,UAAU,CAACG,MAAX,GAAoB,CAArB,CAA5B;;AACA,QAAIhB,aAAa,CAACe,WAAD,CAAb,IAA8BD,SAAS,CAACE,MAAV,GAAmB,CAArD,EAAwD;AACtDF,MAAAA,SAAS,GAAGA,SAAS,CAACG,KAAV,CAAgB,CAAhB,EAAmBH,SAAS,CAACE,MAAV,GAAmB,CAAtC,CAAZ;AACD,KAFD,MAEO;AACLD,MAAAA,WAAW,GAAGJ,MAAd;AACD;;AACD,WAAOP,IAAI,CACT,GAAGU,SAAS,CAACI,GAAV,CACAC,SAAD,IAAgBC,SAAD,IAAelB,UAAU,CAACiB,SAAD,CAAV,GAAwBA,SAAS,CAACC,SAAD,CAAjC,GAA+CC,kBAAkB,CAACD,SAAD,EAAYD,SAAZ,CAD9F,CADM,CAAJ,CAILJ,WAJK,CAAP;AAKD,GAbD;AAcD,CAfD;;AAgBA,IAAIO,WAAW,GAAGZ,iBAAiB,CAACZ,KAAD,CAAnC;AACA,IAAIyB,eAAe,GAAGb,iBAAiB,CAACX,SAAD,CAAvC;;AACA,SAASsB,kBAAT,CAA4B,GAAGP,SAA/B,EAA0C;AACxC,SAAOb,SAAS,CAAC,EAAD,EAAK,GAAGa,SAAR,EAAmBU,oBAAnB,CAAhB;AACD;;AACD,SAASA,oBAAT,CAA8BC,MAA9B,EAAsCC,QAAtC,EAAgDC,GAAhD,EAAqDC,MAArD,EAA6D;AAC3D,MAAI,CAAC1B,UAAU,CAACuB,MAAD,CAAV,IAAsBvB,UAAU,CAACwB,QAAD,CAAjC,KAAgDG,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCJ,MAArC,EAA6CD,GAA7C,CAApD,EAAuG;AACrG,WAAO,CAAC,GAAGM,IAAJ,KAAa;AAClB,YAAMC,WAAW,GAAGhC,UAAU,CAACuB,MAAD,CAAV,GAAqBA,MAAM,CAAC,GAAGQ,IAAJ,CAA3B,GAAuCR,MAA3D;AACA,YAAMU,aAAa,GAAGjC,UAAU,CAACwB,QAAD,CAAV,GAAuBA,QAAQ,CAAC,GAAGO,IAAJ,CAA/B,GAA2CP,QAAjE;AACA,aAAOzB,SAAS,CAAC,EAAD,EAAKiC,WAAL,EAAkBC,aAAlB,EAAiCX,oBAAjC,CAAhB;AACD,KAJD;AAKD;;AACD,SAAO,KAAK,CAAZ;AACD;;AAED,SACEF,WADF,EAEEC,eAFF,EAGEF,kBAHF","sourcesContent":["// src/extend-theme.ts\nimport {\n  theme,\n  baseTheme,\n  isChakraTheme\n} from \"@chakra-ui/theme\";\nimport mergeWith from \"lodash.mergewith\";\nfunction isFunction(value) {\n  return typeof value === \"function\";\n}\nfunction pipe(...fns) {\n  return (v) => fns.reduce((a, b) => b(a), v);\n}\nvar createExtendTheme = (theme2) => {\n  return function extendTheme2(...extensions) {\n    let overrides = [...extensions];\n    let activeTheme = extensions[extensions.length - 1];\n    if (isChakraTheme(activeTheme) && overrides.length > 1) {\n      overrides = overrides.slice(0, overrides.length - 1);\n    } else {\n      activeTheme = theme2;\n    }\n    return pipe(\n      ...overrides.map(\n        (extension) => (prevTheme) => isFunction(extension) ? extension(prevTheme) : mergeThemeOverride(prevTheme, extension)\n      )\n    )(activeTheme);\n  };\n};\nvar extendTheme = createExtendTheme(theme);\nvar extendBaseTheme = createExtendTheme(baseTheme);\nfunction mergeThemeOverride(...overrides) {\n  return mergeWith({}, ...overrides, mergeThemeCustomizer);\n}\nfunction mergeThemeCustomizer(source, override, key, object) {\n  if ((isFunction(source) || isFunction(override)) && Object.prototype.hasOwnProperty.call(object, key)) {\n    return (...args) => {\n      const sourceValue = isFunction(source) ? source(...args) : source;\n      const overrideValue = isFunction(override) ? override(...args) : override;\n      return mergeWith({}, sourceValue, overrideValue, mergeThemeCustomizer);\n    };\n  }\n  return void 0;\n}\n\nexport {\n  extendTheme,\n  extendBaseTheme,\n  mergeThemeOverride\n};\n"]},"metadata":{},"sourceType":"module"}