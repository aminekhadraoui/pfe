{"ast":null,"code":"import { useTheme } from \"./chunk-NLMMK76H.mjs\"; // src/hooks.ts\n\nimport { useColorMode } from \"@chakra-ui/color-mode\";\n\nfunction useChakra() {\n  const colorModeResult = useColorMode();\n  const theme = useTheme();\n  return { ...colorModeResult,\n    theme\n  };\n}\n\nfunction getBreakpointValue(theme, value, fallback) {\n  var _a, _b;\n\n  if (value == null) return value;\n\n  const getValue = val => {\n    var _a2, _b2;\n\n    return (_b2 = (_a2 = theme.__breakpoints) == null ? void 0 : _a2.asArray) == null ? void 0 : _b2[val];\n  };\n\n  return (_b = (_a = getValue(value)) != null ? _a : getValue(fallback)) != null ? _b : fallback;\n}\n\nfunction getTokenValue(theme, value, fallback) {\n  var _a, _b;\n\n  if (value == null) return value;\n\n  const getValue = val => {\n    var _a2, _b2;\n\n    return (_b2 = (_a2 = theme.__cssMap) == null ? void 0 : _a2[val]) == null ? void 0 : _b2.value;\n  };\n\n  return (_b = (_a = getValue(value)) != null ? _a : getValue(fallback)) != null ? _b : fallback;\n}\n\nfunction useToken(scale, token, fallback) {\n  const theme = useTheme();\n  return getToken(scale, token, fallback)(theme);\n}\n\nfunction getToken(scale, token, fallback) {\n  const _token = Array.isArray(token) ? token : [token];\n\n  const _fallback = Array.isArray(fallback) ? fallback : [fallback];\n\n  return theme => {\n    const fallbackArr = _fallback.filter(Boolean);\n\n    const result = _token.map((token2, index) => {\n      var _a, _b;\n\n      if (scale === \"breakpoints\") {\n        return getBreakpointValue(theme, token2, (_a = fallbackArr[index]) != null ? _a : token2);\n      }\n\n      const path = `${scale}.${token2}`;\n      return getTokenValue(theme, path, (_b = fallbackArr[index]) != null ? _b : token2);\n    });\n\n    return Array.isArray(token) ? result : result[0];\n  };\n}\n\nexport { useChakra, useToken, getToken };","map":{"version":3,"sources":["C:/Users/HP/Desktop/pfe/node_modules/@chakra-ui/system/dist/chunk-7V3ZYTH7.mjs"],"names":["useTheme","useColorMode","useChakra","colorModeResult","theme","getBreakpointValue","value","fallback","_a","_b","getValue","val","_a2","_b2","__breakpoints","asArray","getTokenValue","__cssMap","useToken","scale","token","getToken","_token","Array","isArray","_fallback","fallbackArr","filter","Boolean","result","map","token2","index","path"],"mappings":"AAAA,SACEA,QADF,QAEO,sBAFP,C,CAIA;;AACA,SAASC,YAAT,QAA6B,uBAA7B;;AACA,SAASC,SAAT,GAAqB;AACnB,QAAMC,eAAe,GAAGF,YAAY,EAApC;AACA,QAAMG,KAAK,GAAGJ,QAAQ,EAAtB;AACA,SAAO,EAAE,GAAGG,eAAL;AAAsBC,IAAAA;AAAtB,GAAP;AACD;;AACD,SAASC,kBAAT,CAA4BD,KAA5B,EAAmCE,KAAnC,EAA0CC,QAA1C,EAAoD;AAClD,MAAIC,EAAJ,EAAQC,EAAR;;AACA,MAAIH,KAAK,IAAI,IAAb,EACE,OAAOA,KAAP;;AACF,QAAMI,QAAQ,GAAIC,GAAD,IAAS;AACxB,QAAIC,GAAJ,EAASC,GAAT;;AACA,WAAO,CAACA,GAAG,GAAG,CAACD,GAAG,GAAGR,KAAK,CAACU,aAAb,KAA+B,IAA/B,GAAsC,KAAK,CAA3C,GAA+CF,GAAG,CAACG,OAA1D,KAAsE,IAAtE,GAA6E,KAAK,CAAlF,GAAsFF,GAAG,CAACF,GAAD,CAAhG;AACD,GAHD;;AAIA,SAAO,CAACF,EAAE,GAAG,CAACD,EAAE,GAAGE,QAAQ,CAACJ,KAAD,CAAd,KAA0B,IAA1B,GAAiCE,EAAjC,GAAsCE,QAAQ,CAACH,QAAD,CAApD,KAAmE,IAAnE,GAA0EE,EAA1E,GAA+EF,QAAtF;AACD;;AACD,SAASS,aAAT,CAAuBZ,KAAvB,EAA8BE,KAA9B,EAAqCC,QAArC,EAA+C;AAC7C,MAAIC,EAAJ,EAAQC,EAAR;;AACA,MAAIH,KAAK,IAAI,IAAb,EACE,OAAOA,KAAP;;AACF,QAAMI,QAAQ,GAAIC,GAAD,IAAS;AACxB,QAAIC,GAAJ,EAASC,GAAT;;AACA,WAAO,CAACA,GAAG,GAAG,CAACD,GAAG,GAAGR,KAAK,CAACa,QAAb,KAA0B,IAA1B,GAAiC,KAAK,CAAtC,GAA0CL,GAAG,CAACD,GAAD,CAApD,KAA8D,IAA9D,GAAqE,KAAK,CAA1E,GAA8EE,GAAG,CAACP,KAAzF;AACD,GAHD;;AAIA,SAAO,CAACG,EAAE,GAAG,CAACD,EAAE,GAAGE,QAAQ,CAACJ,KAAD,CAAd,KAA0B,IAA1B,GAAiCE,EAAjC,GAAsCE,QAAQ,CAACH,QAAD,CAApD,KAAmE,IAAnE,GAA0EE,EAA1E,GAA+EF,QAAtF;AACD;;AACD,SAASW,QAAT,CAAkBC,KAAlB,EAAyBC,KAAzB,EAAgCb,QAAhC,EAA0C;AACxC,QAAMH,KAAK,GAAGJ,QAAQ,EAAtB;AACA,SAAOqB,QAAQ,CAACF,KAAD,EAAQC,KAAR,EAAeb,QAAf,CAAR,CAAiCH,KAAjC,CAAP;AACD;;AACD,SAASiB,QAAT,CAAkBF,KAAlB,EAAyBC,KAAzB,EAAgCb,QAAhC,EAA0C;AACxC,QAAMe,MAAM,GAAGC,KAAK,CAACC,OAAN,CAAcJ,KAAd,IAAuBA,KAAvB,GAA+B,CAACA,KAAD,CAA9C;;AACA,QAAMK,SAAS,GAAGF,KAAK,CAACC,OAAN,CAAcjB,QAAd,IAA0BA,QAA1B,GAAqC,CAACA,QAAD,CAAvD;;AACA,SAAQH,KAAD,IAAW;AAChB,UAAMsB,WAAW,GAAGD,SAAS,CAACE,MAAV,CAAiBC,OAAjB,CAApB;;AACA,UAAMC,MAAM,GAAGP,MAAM,CAACQ,GAAP,CAAW,CAACC,MAAD,EAASC,KAAT,KAAmB;AAC3C,UAAIxB,EAAJ,EAAQC,EAAR;;AACA,UAAIU,KAAK,KAAK,aAAd,EAA6B;AAC3B,eAAOd,kBAAkB,CAACD,KAAD,EAAQ2B,MAAR,EAAgB,CAACvB,EAAE,GAAGkB,WAAW,CAACM,KAAD,CAAjB,KAA6B,IAA7B,GAAoCxB,EAApC,GAAyCuB,MAAzD,CAAzB;AACD;;AACD,YAAME,IAAI,GAAI,GAAEd,KAAM,IAAGY,MAAO,EAAhC;AACA,aAAOf,aAAa,CAACZ,KAAD,EAAQ6B,IAAR,EAAc,CAACxB,EAAE,GAAGiB,WAAW,CAACM,KAAD,CAAjB,KAA6B,IAA7B,GAAoCvB,EAApC,GAAyCsB,MAAvD,CAApB;AACD,KAPc,CAAf;;AAQA,WAAOR,KAAK,CAACC,OAAN,CAAcJ,KAAd,IAAuBS,MAAvB,GAAgCA,MAAM,CAAC,CAAD,CAA7C;AACD,GAXD;AAYD;;AAED,SACE3B,SADF,EAEEgB,QAFF,EAGEG,QAHF","sourcesContent":["import {\n  useTheme\n} from \"./chunk-NLMMK76H.mjs\";\n\n// src/hooks.ts\nimport { useColorMode } from \"@chakra-ui/color-mode\";\nfunction useChakra() {\n  const colorModeResult = useColorMode();\n  const theme = useTheme();\n  return { ...colorModeResult, theme };\n}\nfunction getBreakpointValue(theme, value, fallback) {\n  var _a, _b;\n  if (value == null)\n    return value;\n  const getValue = (val) => {\n    var _a2, _b2;\n    return (_b2 = (_a2 = theme.__breakpoints) == null ? void 0 : _a2.asArray) == null ? void 0 : _b2[val];\n  };\n  return (_b = (_a = getValue(value)) != null ? _a : getValue(fallback)) != null ? _b : fallback;\n}\nfunction getTokenValue(theme, value, fallback) {\n  var _a, _b;\n  if (value == null)\n    return value;\n  const getValue = (val) => {\n    var _a2, _b2;\n    return (_b2 = (_a2 = theme.__cssMap) == null ? void 0 : _a2[val]) == null ? void 0 : _b2.value;\n  };\n  return (_b = (_a = getValue(value)) != null ? _a : getValue(fallback)) != null ? _b : fallback;\n}\nfunction useToken(scale, token, fallback) {\n  const theme = useTheme();\n  return getToken(scale, token, fallback)(theme);\n}\nfunction getToken(scale, token, fallback) {\n  const _token = Array.isArray(token) ? token : [token];\n  const _fallback = Array.isArray(fallback) ? fallback : [fallback];\n  return (theme) => {\n    const fallbackArr = _fallback.filter(Boolean);\n    const result = _token.map((token2, index) => {\n      var _a, _b;\n      if (scale === \"breakpoints\") {\n        return getBreakpointValue(theme, token2, (_a = fallbackArr[index]) != null ? _a : token2);\n      }\n      const path = `${scale}.${token2}`;\n      return getTokenValue(theme, path, (_b = fallbackArr[index]) != null ? _b : token2);\n    });\n    return Array.isArray(token) ? result : result[0];\n  };\n}\n\nexport {\n  useChakra,\n  useToken,\n  getToken\n};\n"]},"metadata":{},"sourceType":"module"}