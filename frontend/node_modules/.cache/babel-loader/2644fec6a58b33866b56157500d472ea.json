{"ast":null,"code":"// src/css-calc.ts\nimport { isObject } from \"@chakra-ui/shared-utils\";\n\nfunction toRef(operand) {\n  if (isObject(operand) && operand.reference) {\n    return operand.reference;\n  }\n\n  return String(operand);\n}\n\nvar toExpr = (operator, ...operands) => operands.map(toRef).join(` ${operator} `).replace(/calc/g, \"\");\n\nvar add = (...operands) => `calc(${toExpr(\"+\", ...operands)})`;\n\nvar subtract = (...operands) => `calc(${toExpr(\"-\", ...operands)})`;\n\nvar multiply = (...operands) => `calc(${toExpr(\"*\", ...operands)})`;\n\nvar divide = (...operands) => `calc(${toExpr(\"/\", ...operands)})`;\n\nvar negate = x => {\n  const value = toRef(x);\n\n  if (value != null && !Number.isNaN(parseFloat(value))) {\n    return String(value).startsWith(\"-\") ? String(value).slice(1) : `-${value}`;\n  }\n\n  return multiply(value, -1);\n};\n\nvar calc = Object.assign(x => ({\n  add: (...operands) => calc(add(x, ...operands)),\n  subtract: (...operands) => calc(subtract(x, ...operands)),\n  multiply: (...operands) => calc(multiply(x, ...operands)),\n  divide: (...operands) => calc(divide(x, ...operands)),\n  negate: () => calc(negate(x)),\n  toString: () => x.toString()\n}), {\n  add,\n  subtract,\n  multiply,\n  divide,\n  negate\n});\nexport { calc };","map":{"version":3,"sources":["C:/Users/HP/Desktop/pfe/node_modules/@chakra-ui/theme-tools/dist/chunk-E3OBLH5E.mjs"],"names":["isObject","toRef","operand","reference","String","toExpr","operator","operands","map","join","replace","add","subtract","multiply","divide","negate","x","value","Number","isNaN","parseFloat","startsWith","slice","calc","Object","assign","toString"],"mappings":"AAAA;AACA,SAASA,QAAT,QAAyB,yBAAzB;;AACA,SAASC,KAAT,CAAeC,OAAf,EAAwB;AACtB,MAAIF,QAAQ,CAACE,OAAD,CAAR,IAAqBA,OAAO,CAACC,SAAjC,EAA4C;AAC1C,WAAOD,OAAO,CAACC,SAAf;AACD;;AACD,SAAOC,MAAM,CAACF,OAAD,CAAb;AACD;;AACD,IAAIG,MAAM,GAAG,CAACC,QAAD,EAAW,GAAGC,QAAd,KAA2BA,QAAQ,CAACC,GAAT,CAAaP,KAAb,EAAoBQ,IAApB,CAA0B,IAAGH,QAAS,GAAtC,EAA0CI,OAA1C,CAAkD,OAAlD,EAA2D,EAA3D,CAAxC;;AACA,IAAIC,GAAG,GAAG,CAAC,GAAGJ,QAAJ,KAAkB,QAAOF,MAAM,CAAC,GAAD,EAAM,GAAGE,QAAT,CAAmB,GAA5D;;AACA,IAAIK,QAAQ,GAAG,CAAC,GAAGL,QAAJ,KAAkB,QAAOF,MAAM,CAAC,GAAD,EAAM,GAAGE,QAAT,CAAmB,GAAjE;;AACA,IAAIM,QAAQ,GAAG,CAAC,GAAGN,QAAJ,KAAkB,QAAOF,MAAM,CAAC,GAAD,EAAM,GAAGE,QAAT,CAAmB,GAAjE;;AACA,IAAIO,MAAM,GAAG,CAAC,GAAGP,QAAJ,KAAkB,QAAOF,MAAM,CAAC,GAAD,EAAM,GAAGE,QAAT,CAAmB,GAA/D;;AACA,IAAIQ,MAAM,GAAIC,CAAD,IAAO;AAClB,QAAMC,KAAK,GAAGhB,KAAK,CAACe,CAAD,CAAnB;;AACA,MAAIC,KAAK,IAAI,IAAT,IAAiB,CAACC,MAAM,CAACC,KAAP,CAAaC,UAAU,CAACH,KAAD,CAAvB,CAAtB,EAAuD;AACrD,WAAOb,MAAM,CAACa,KAAD,CAAN,CAAcI,UAAd,CAAyB,GAAzB,IAAgCjB,MAAM,CAACa,KAAD,CAAN,CAAcK,KAAd,CAAoB,CAApB,CAAhC,GAA0D,IAAGL,KAAM,EAA1E;AACD;;AACD,SAAOJ,QAAQ,CAACI,KAAD,EAAQ,CAAC,CAAT,CAAf;AACD,CAND;;AAOA,IAAIM,IAAI,GAAGC,MAAM,CAACC,MAAP,CACRT,CAAD,KAAQ;AACNL,EAAAA,GAAG,EAAE,CAAC,GAAGJ,QAAJ,KAAiBgB,IAAI,CAACZ,GAAG,CAACK,CAAD,EAAI,GAAGT,QAAP,CAAJ,CADpB;AAENK,EAAAA,QAAQ,EAAE,CAAC,GAAGL,QAAJ,KAAiBgB,IAAI,CAACX,QAAQ,CAACI,CAAD,EAAI,GAAGT,QAAP,CAAT,CAFzB;AAGNM,EAAAA,QAAQ,EAAE,CAAC,GAAGN,QAAJ,KAAiBgB,IAAI,CAACV,QAAQ,CAACG,CAAD,EAAI,GAAGT,QAAP,CAAT,CAHzB;AAINO,EAAAA,MAAM,EAAE,CAAC,GAAGP,QAAJ,KAAiBgB,IAAI,CAACT,MAAM,CAACE,CAAD,EAAI,GAAGT,QAAP,CAAP,CAJvB;AAKNQ,EAAAA,MAAM,EAAE,MAAMQ,IAAI,CAACR,MAAM,CAACC,CAAD,CAAP,CALZ;AAMNU,EAAAA,QAAQ,EAAE,MAAMV,CAAC,CAACU,QAAF;AANV,CAAR,CADS,EAST;AACEf,EAAAA,GADF;AAEEC,EAAAA,QAFF;AAGEC,EAAAA,QAHF;AAIEC,EAAAA,MAJF;AAKEC,EAAAA;AALF,CATS,CAAX;AAkBA,SACEQ,IADF","sourcesContent":["// src/css-calc.ts\nimport { isObject } from \"@chakra-ui/shared-utils\";\nfunction toRef(operand) {\n  if (isObject(operand) && operand.reference) {\n    return operand.reference;\n  }\n  return String(operand);\n}\nvar toExpr = (operator, ...operands) => operands.map(toRef).join(` ${operator} `).replace(/calc/g, \"\");\nvar add = (...operands) => `calc(${toExpr(\"+\", ...operands)})`;\nvar subtract = (...operands) => `calc(${toExpr(\"-\", ...operands)})`;\nvar multiply = (...operands) => `calc(${toExpr(\"*\", ...operands)})`;\nvar divide = (...operands) => `calc(${toExpr(\"/\", ...operands)})`;\nvar negate = (x) => {\n  const value = toRef(x);\n  if (value != null && !Number.isNaN(parseFloat(value))) {\n    return String(value).startsWith(\"-\") ? String(value).slice(1) : `-${value}`;\n  }\n  return multiply(value, -1);\n};\nvar calc = Object.assign(\n  (x) => ({\n    add: (...operands) => calc(add(x, ...operands)),\n    subtract: (...operands) => calc(subtract(x, ...operands)),\n    multiply: (...operands) => calc(multiply(x, ...operands)),\n    divide: (...operands) => calc(divide(x, ...operands)),\n    negate: () => calc(negate(x)),\n    toString: () => x.toString()\n  }),\n  {\n    add,\n    subtract,\n    multiply,\n    divide,\n    negate\n  }\n);\n\nexport {\n  calc\n};\n"]},"metadata":{},"sourceType":"module"}