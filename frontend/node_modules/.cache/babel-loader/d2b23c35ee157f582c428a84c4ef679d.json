{"ast":null,"code":"// src/providers.tsx\nimport { useColorMode } from \"@chakra-ui/color-mode\";\nimport { createContext } from \"@chakra-ui/react-utils\";\nimport { css, toCSSVar } from \"@chakra-ui/styled-system\";\nimport { memoizedGet as get, runIfFn } from \"@chakra-ui/utils\";\nimport { Global, ThemeProvider as EmotionThemeProvider } from \"@emotion/react\";\nimport { useMemo } from \"react\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\n\nfunction ThemeProvider(props) {\n  const {\n    cssVarsRoot,\n    theme,\n    children\n  } = props;\n  const computedTheme = useMemo(() => toCSSVar(theme), [theme]);\n  return /* @__PURE__ */jsxs(EmotionThemeProvider, {\n    theme: computedTheme,\n    children: [/* @__PURE__ */jsx(CSSVars, {\n      root: cssVarsRoot\n    }), children]\n  });\n}\n\nfunction CSSVars({\n  root = \":host, :root\"\n}) {\n  const selector = [root, `[data-theme]`].join(\",\");\n  return /* @__PURE__ */jsx(Global, {\n    styles: theme => ({\n      [selector]: theme.__cssVars\n    })\n  });\n}\n\nvar [StylesProvider, useStyles] = createContext({\n  name: \"StylesContext\",\n  errorMessage: \"useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` \"\n});\n\nfunction createStylesContext(componentName) {\n  return createContext({\n    name: `${componentName}StylesContext`,\n    errorMessage: `useStyles: \"styles\" is undefined. Seems you forgot to wrap the components in \"<${componentName} />\" `\n  });\n}\n\nfunction GlobalStyle() {\n  const {\n    colorMode\n  } = useColorMode();\n  return /* @__PURE__ */jsx(Global, {\n    styles: theme => {\n      const styleObjectOrFn = get(theme, \"styles.global\");\n      const globalStyles = runIfFn(styleObjectOrFn, {\n        theme,\n        colorMode\n      });\n      if (!globalStyles) return void 0;\n      const styles = css(globalStyles)(theme);\n      return styles;\n    }\n  });\n}\n\nexport { ThemeProvider, CSSVars, StylesProvider, useStyles, createStylesContext, GlobalStyle };","map":{"version":3,"sources":["C:/Users/HP/Desktop/pfe/node_modules/@chakra-ui/system/dist/chunk-3ZTTLJBV.mjs"],"names":["useColorMode","createContext","css","toCSSVar","memoizedGet","get","runIfFn","Global","ThemeProvider","EmotionThemeProvider","useMemo","jsx","jsxs","props","cssVarsRoot","theme","children","computedTheme","CSSVars","root","selector","join","styles","__cssVars","StylesProvider","useStyles","name","errorMessage","createStylesContext","componentName","GlobalStyle","colorMode","styleObjectOrFn","globalStyles"],"mappings":"AAAA;AACA,SAASA,YAAT,QAA6B,uBAA7B;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,GAAT,EAAcC,QAAd,QAA8B,0BAA9B;AACA,SAASC,WAAW,IAAIC,GAAxB,EAA6BC,OAA7B,QAA4C,kBAA5C;AACA,SACEC,MADF,EAEEC,aAAa,IAAIC,oBAFnB,QAGO,gBAHP;AAIA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,GAAT,EAAcC,IAAd,QAA0B,mBAA1B;;AACA,SAASJ,aAAT,CAAuBK,KAAvB,EAA8B;AAC5B,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,KAAf;AAAsBC,IAAAA;AAAtB,MAAmCH,KAAzC;AACA,QAAMI,aAAa,GAAGP,OAAO,CAAC,MAAMP,QAAQ,CAACY,KAAD,CAAf,EAAwB,CAACA,KAAD,CAAxB,CAA7B;AACA,SAAO,eAAgBH,IAAI,CAACH,oBAAD,EAAuB;AAAEM,IAAAA,KAAK,EAAEE,aAAT;AAAwBD,IAAAA,QAAQ,EAAE,CAClF,eAAgBL,GAAG,CAACO,OAAD,EAAU;AAAEC,MAAAA,IAAI,EAAEL;AAAR,KAAV,CAD+D,EAElFE,QAFkF;AAAlC,GAAvB,CAA3B;AAID;;AACD,SAASE,OAAT,CAAiB;AAAEC,EAAAA,IAAI,GAAG;AAAT,CAAjB,EAA4C;AAC1C,QAAMC,QAAQ,GAAG,CAACD,IAAD,EAAQ,cAAR,EAAuBE,IAAvB,CAA4B,GAA5B,CAAjB;AACA,SAAO,eAAgBV,GAAG,CAACJ,MAAD,EAAS;AAAEe,IAAAA,MAAM,EAAGP,KAAD,KAAY;AAAE,OAACK,QAAD,GAAYL,KAAK,CAACQ;AAApB,KAAZ;AAAV,GAAT,CAA1B;AACD;;AACD,IAAI,CAACC,cAAD,EAAiBC,SAAjB,IAA8BxB,aAAa,CAAC;AAC9CyB,EAAAA,IAAI,EAAE,eADwC;AAE9CC,EAAAA,YAAY,EAAE;AAFgC,CAAD,CAA/C;;AAIA,SAASC,mBAAT,CAA6BC,aAA7B,EAA4C;AAC1C,SAAO5B,aAAa,CAAC;AACnByB,IAAAA,IAAI,EAAG,GAAEG,aAAc,eADJ;AAEnBF,IAAAA,YAAY,EAAG,kFAAiFE,aAAc;AAF3F,GAAD,CAApB;AAID;;AACD,SAASC,WAAT,GAAuB;AACrB,QAAM;AAAEC,IAAAA;AAAF,MAAgB/B,YAAY,EAAlC;AACA,SAAO,eAAgBW,GAAG,CACxBJ,MADwB,EAExB;AACEe,IAAAA,MAAM,EAAGP,KAAD,IAAW;AACjB,YAAMiB,eAAe,GAAG3B,GAAG,CAACU,KAAD,EAAQ,eAAR,CAA3B;AACA,YAAMkB,YAAY,GAAG3B,OAAO,CAAC0B,eAAD,EAAkB;AAAEjB,QAAAA,KAAF;AAASgB,QAAAA;AAAT,OAAlB,CAA5B;AACA,UAAI,CAACE,YAAL,EACE,OAAO,KAAK,CAAZ;AACF,YAAMX,MAAM,GAAGpB,GAAG,CAAC+B,YAAD,CAAH,CAAkBlB,KAAlB,CAAf;AACA,aAAOO,MAAP;AACD;AARH,GAFwB,CAA1B;AAaD;;AAED,SACEd,aADF,EAEEU,OAFF,EAGEM,cAHF,EAIEC,SAJF,EAKEG,mBALF,EAMEE,WANF","sourcesContent":["// src/providers.tsx\nimport { useColorMode } from \"@chakra-ui/color-mode\";\nimport { createContext } from \"@chakra-ui/react-utils\";\nimport { css, toCSSVar } from \"@chakra-ui/styled-system\";\nimport { memoizedGet as get, runIfFn } from \"@chakra-ui/utils\";\nimport {\n  Global,\n  ThemeProvider as EmotionThemeProvider\n} from \"@emotion/react\";\nimport { useMemo } from \"react\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nfunction ThemeProvider(props) {\n  const { cssVarsRoot, theme, children } = props;\n  const computedTheme = useMemo(() => toCSSVar(theme), [theme]);\n  return /* @__PURE__ */ jsxs(EmotionThemeProvider, { theme: computedTheme, children: [\n    /* @__PURE__ */ jsx(CSSVars, { root: cssVarsRoot }),\n    children\n  ] });\n}\nfunction CSSVars({ root = \":host, :root\" }) {\n  const selector = [root, `[data-theme]`].join(\",\");\n  return /* @__PURE__ */ jsx(Global, { styles: (theme) => ({ [selector]: theme.__cssVars }) });\n}\nvar [StylesProvider, useStyles] = createContext({\n  name: \"StylesContext\",\n  errorMessage: \"useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` \"\n});\nfunction createStylesContext(componentName) {\n  return createContext({\n    name: `${componentName}StylesContext`,\n    errorMessage: `useStyles: \"styles\" is undefined. Seems you forgot to wrap the components in \"<${componentName} />\" `\n  });\n}\nfunction GlobalStyle() {\n  const { colorMode } = useColorMode();\n  return /* @__PURE__ */ jsx(\n    Global,\n    {\n      styles: (theme) => {\n        const styleObjectOrFn = get(theme, \"styles.global\");\n        const globalStyles = runIfFn(styleObjectOrFn, { theme, colorMode });\n        if (!globalStyles)\n          return void 0;\n        const styles = css(globalStyles)(theme);\n        return styles;\n      }\n    }\n  );\n}\n\nexport {\n  ThemeProvider,\n  CSSVars,\n  StylesProvider,\n  useStyles,\n  createStylesContext,\n  GlobalStyle\n};\n"]},"metadata":{},"sourceType":"module"}