{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\pfe\\\\frontend\\\\src\\\\components\\\\ChatbotComponent.js\";\nimport React, { useState } from 'react';\nimport { Container, Row, Col, Button, InputGroup, FormControl } from 'react-bootstrap';\n\nconst Chatbot = () => {\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n\n  const handleMessageSubmit = event => {\n    event.preventDefault();\n\n    if (inputValue) {\n      setMessages([...messages, {\n        message: inputValue,\n        sender: 'user'\n      }]);\n      setInputValue(''); // Here you can handle the user's message and generate a response based on their category selection.\n      // For this example, we're just returning a generic response based on the input value.\n\n      const response = {\n        message: 'Thanks for your message!',\n        sender: 'bot'\n      };\n      setMessages([...messages, response]);\n    }\n  };\n\n  const handleCategorySelect = category => {\n    // Here you can set the category in state or handle the category selection however you'd like.\n    // For this example, we're just adding a new message to the chat with the selected category.\n    const message = {\n      message: `I'm interested in ${category}.`,\n      sender: 'user'\n    };\n    setMessages([...messages, message]);\n  };\n\n  return /*#__PURE__*/React.createElement(Container, {\n    className: \"chatbot-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chatbot-messages\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 11\n    }\n  }, messages.map((message, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: index,\n    className: `chatbot-message chatbot-message-${message.sender}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 17\n    }\n  }, message.message)))))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleMessageSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputGroup, {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    placeholder: \"Type your message here...\",\n    \"aria-label\": \"Type your message here...\",\n    value: inputValue,\n    onChange: event => setInputValue(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 15\n    }\n  }, \"Send\"))))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }, \"Choose a category:\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: () => handleCategorySelect('rings'),\n    variant: \"secondary\",\n    className: \"category-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }\n  }, \"Rings\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: () => handleCategorySelect('necklaces'),\n    variant: \"secondary\",\n    className: \"category-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }, \"Necklaces\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: () => handleCategorySelect('bracelets'),\n    variant: \"secondary\",\n    className: \"category-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }, \"Bracelets\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: () => handleCategorySelect('earrings'),\n    variant: \"secondary\",\n    className: \"category-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  }, \"Earrings\"))));\n};\n\nexport default Chatbot;","map":{"version":3,"sources":["C:/Users/HP/Desktop/pfe/frontend/src/components/ChatbotComponent.js"],"names":["React","useState","Container","Row","Col","Button","InputGroup","FormControl","Chatbot","messages","setMessages","inputValue","setInputValue","handleMessageSubmit","event","preventDefault","message","sender","response","handleCategorySelect","category","map","index","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { Container, Row, Col, Button, InputGroup, FormControl } from 'react-bootstrap';\r\n\r\nconst Chatbot = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  const handleMessageSubmit = (event) => {\r\n    event.preventDefault();\r\n    if (inputValue) {\r\n      setMessages([...messages, { message: inputValue, sender: 'user' }]);\r\n      setInputValue('');\r\n\r\n      // Here you can handle the user's message and generate a response based on their category selection.\r\n      // For this example, we're just returning a generic response based on the input value.\r\n      const response = { message: 'Thanks for your message!', sender: 'bot' };\r\n      setMessages([...messages, response]);\r\n    }\r\n  };\r\n\r\n  const handleCategorySelect = (category) => {\r\n    // Here you can set the category in state or handle the category selection however you'd like.\r\n    // For this example, we're just adding a new message to the chat with the selected category.\r\n    const message = { message: `I'm interested in ${category}.`, sender: 'user' };\r\n    setMessages([...messages, message]);\r\n  };\r\n\r\n  return (\r\n    <Container className=\"chatbot-container\">\r\n      <Row>\r\n        <Col>\r\n          <div className=\"chatbot-messages\">\r\n            {messages.map((message, index) => (\r\n              <div key={index} className={`chatbot-message chatbot-message-${message.sender}`}>\r\n                <p>{message.message}</p>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <form onSubmit={handleMessageSubmit}>\r\n            <InputGroup className=\"mb-3\">\r\n              <FormControl\r\n                placeholder=\"Type your message here...\"\r\n                aria-label=\"Type your message here...\"\r\n                value={inputValue}\r\n                onChange={(event) => setInputValue(event.target.value)}\r\n              />\r\n              <Button type=\"submit\">Send</Button>\r\n            </InputGroup>\r\n          </form>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <p>Choose a category:</p>\r\n          <Button onClick={() => handleCategorySelect('rings')} variant=\"secondary\" className=\"category-button\">\r\n            Rings\r\n          </Button>\r\n          <Button onClick={() => handleCategorySelect('necklaces')} variant=\"secondary\" className=\"category-button\">\r\n            Necklaces\r\n          </Button>\r\n          <Button onClick={() => handleCategorySelect('bracelets')} variant=\"secondary\" className=\"category-button\">\r\n            Bracelets\r\n          </Button>\r\n          <Button onClick={() => handleCategorySelect('earrings')} variant=\"secondary\" className=\"category-button\">\r\n            Earrings\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Chatbot;"]},"metadata":{},"sourceType":"module"}