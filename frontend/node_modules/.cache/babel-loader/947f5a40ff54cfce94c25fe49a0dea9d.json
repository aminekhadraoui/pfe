{"ast":null,"code":"import { mix } from '../../utils/mix.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { scalePoint } from './delta-apply.mjs';\n/**\n * Remove a delta from a point. This is essentially the steps of applyPointDelta in reverse\n */\n\nfunction removePointDelta(point, translate, scale, originPoint, boxScale) {\n  point -= translate;\n  point = scalePoint(point, 1 / scale, originPoint);\n\n  if (boxScale !== undefined) {\n    point = scalePoint(point, 1 / boxScale, originPoint);\n  }\n\n  return point;\n}\n/**\n * Remove a delta from an axis. This is essentially the steps of applyAxisDelta in reverse\n */\n\n\nfunction removeAxisDelta(axis, translate = 0, scale = 1, origin = 0.5, boxScale, originAxis = axis, sourceAxis = axis) {\n  if (percent.test(translate)) {\n    translate = parseFloat(translate);\n    const relativeProgress = mix(sourceAxis.min, sourceAxis.max, translate / 100);\n    translate = relativeProgress - sourceAxis.min;\n  }\n\n  if (typeof translate !== \"number\") return;\n  let originPoint = mix(originAxis.min, originAxis.max, origin);\n  if (axis === originAxis) originPoint -= translate;\n  axis.min = removePointDelta(axis.min, translate, scale, originPoint, boxScale);\n  axis.max = removePointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Remove a transforms from an axis. This is essentially the steps of applyAxisTransforms in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\n\n\nfunction removeAxisTransforms(axis, transforms, [key, scaleKey, originKey], origin, sourceAxis) {\n  removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin, sourceAxis);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */\n\n\nconst xKeys = [\"x\", \"scaleX\", \"originX\"];\nconst yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\n * Remove a transforms from an box. This is essentially the steps of applyAxisBox in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\n\nfunction removeBoxTransforms(box, transforms, originBox, sourceBox) {\n  removeAxisTransforms(box.x, transforms, xKeys, originBox ? originBox.x : undefined, sourceBox ? sourceBox.x : undefined);\n  removeAxisTransforms(box.y, transforms, yKeys, originBox ? originBox.y : undefined, sourceBox ? sourceBox.y : undefined);\n}\n\nexport { removeAxisDelta, removeAxisTransforms, removeBoxTransforms, removePointDelta };","map":{"version":3,"sources":["C:/Users/HP/Desktop/pfe/node_modules/framer-motion/dist/es/projection/geometry/delta-remove.mjs"],"names":["mix","percent","scalePoint","removePointDelta","point","translate","scale","originPoint","boxScale","undefined","removeAxisDelta","axis","origin","originAxis","sourceAxis","test","parseFloat","relativeProgress","min","max","removeAxisTransforms","transforms","key","scaleKey","originKey","xKeys","yKeys","removeBoxTransforms","box","originBox","sourceBox","x","y"],"mappings":"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","sourcesContent":["import { mix } from '../../utils/mix.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { scalePoint } from './delta-apply.mjs';\n\n/**\n * Remove a delta from a point. This is essentially the steps of applyPointDelta in reverse\n */\nfunction removePointDelta(point, translate, scale, originPoint, boxScale) {\n    point -= translate;\n    point = scalePoint(point, 1 / scale, originPoint);\n    if (boxScale !== undefined) {\n        point = scalePoint(point, 1 / boxScale, originPoint);\n    }\n    return point;\n}\n/**\n * Remove a delta from an axis. This is essentially the steps of applyAxisDelta in reverse\n */\nfunction removeAxisDelta(axis, translate = 0, scale = 1, origin = 0.5, boxScale, originAxis = axis, sourceAxis = axis) {\n    if (percent.test(translate)) {\n        translate = parseFloat(translate);\n        const relativeProgress = mix(sourceAxis.min, sourceAxis.max, translate / 100);\n        translate = relativeProgress - sourceAxis.min;\n    }\n    if (typeof translate !== \"number\")\n        return;\n    let originPoint = mix(originAxis.min, originAxis.max, origin);\n    if (axis === originAxis)\n        originPoint -= translate;\n    axis.min = removePointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = removePointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Remove a transforms from an axis. This is essentially the steps of applyAxisTransforms in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeAxisTransforms(axis, transforms, [key, scaleKey, originKey], origin, sourceAxis) {\n    removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin, sourceAxis);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */\nconst xKeys = [\"x\", \"scaleX\", \"originX\"];\nconst yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\n * Remove a transforms from an box. This is essentially the steps of applyAxisBox in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeBoxTransforms(box, transforms, originBox, sourceBox) {\n    removeAxisTransforms(box.x, transforms, xKeys, originBox ? originBox.x : undefined, sourceBox ? sourceBox.x : undefined);\n    removeAxisTransforms(box.y, transforms, yKeys, originBox ? originBox.y : undefined, sourceBox ? sourceBox.y : undefined);\n}\n\nexport { removeAxisDelta, removeAxisTransforms, removeBoxTransforms, removePointDelta };\n"]},"metadata":{},"sourceType":"module"}