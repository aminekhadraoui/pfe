{"ast":null,"code":"import { isArray, isObject } from \"./chunk-Y5FGD7DM.mjs\"; // src/flatten.ts\n\nfunction flatten(target, maxDepth = Infinity) {\n  if (!isObject(target) && !Array.isArray(target) || !maxDepth) {\n    return target;\n  }\n\n  return Object.entries(target).reduce((result, [key, value]) => {\n    if (isObject(value) || isArray(value)) {\n      Object.entries(flatten(value, maxDepth - 1)).forEach(([childKey, childValue]) => {\n        result[`${key}.${childKey}`] = childValue;\n      });\n    } else {\n      result[key] = value;\n    }\n\n    return result;\n  }, {});\n}\n\nexport { flatten };","map":{"version":3,"sources":["C:/Users/HP/Desktop/pfe/node_modules/@chakra-ui/utils/dist/chunk-W5Y7LCVY.mjs"],"names":["isArray","isObject","flatten","target","maxDepth","Infinity","Array","Object","entries","reduce","result","key","value","forEach","childKey","childValue"],"mappings":"AAAA,SACEA,OADF,EAEEC,QAFF,QAGO,sBAHP,C,CAKA;;AACA,SAASC,OAAT,CAAiBC,MAAjB,EAAyBC,QAAQ,GAAGC,QAApC,EAA8C;AAC5C,MAAI,CAACJ,QAAQ,CAACE,MAAD,CAAT,IAAqB,CAACG,KAAK,CAACN,OAAN,CAAcG,MAAd,CAAtB,IAA+C,CAACC,QAApD,EAA8D;AAC5D,WAAOD,MAAP;AACD;;AACD,SAAOI,MAAM,CAACC,OAAP,CAAeL,MAAf,EAAuBM,MAAvB,CAA8B,CAACC,MAAD,EAAS,CAACC,GAAD,EAAMC,KAAN,CAAT,KAA0B;AAC7D,QAAIX,QAAQ,CAACW,KAAD,CAAR,IAAmBZ,OAAO,CAACY,KAAD,CAA9B,EAAuC;AACrCL,MAAAA,MAAM,CAACC,OAAP,CAAeN,OAAO,CAACU,KAAD,EAAQR,QAAQ,GAAG,CAAnB,CAAtB,EAA6CS,OAA7C,CACE,CAAC,CAACC,QAAD,EAAWC,UAAX,CAAD,KAA4B;AAC1BL,QAAAA,MAAM,CAAE,GAAEC,GAAI,IAAGG,QAAS,EAApB,CAAN,GAA+BC,UAA/B;AACD,OAHH;AAKD,KAND,MAMO;AACLL,MAAAA,MAAM,CAACC,GAAD,CAAN,GAAcC,KAAd;AACD;;AACD,WAAOF,MAAP;AACD,GAXM,EAWJ,EAXI,CAAP;AAYD;;AAED,SACER,OADF","sourcesContent":["import {\n  isArray,\n  isObject\n} from \"./chunk-Y5FGD7DM.mjs\";\n\n// src/flatten.ts\nfunction flatten(target, maxDepth = Infinity) {\n  if (!isObject(target) && !Array.isArray(target) || !maxDepth) {\n    return target;\n  }\n  return Object.entries(target).reduce((result, [key, value]) => {\n    if (isObject(value) || isArray(value)) {\n      Object.entries(flatten(value, maxDepth - 1)).forEach(\n        ([childKey, childValue]) => {\n          result[`${key}.${childKey}`] = childValue;\n        }\n      );\n    } else {\n      result[key] = value;\n    }\n    return result;\n  }, {});\n}\n\nexport {\n  flatten\n};\n"]},"metadata":{},"sourceType":"module"}