{"ast":null,"code":"import { keyframes } from '../../generators/keyframes.mjs';\nimport { spring } from '../../generators/spring/index.mjs';\nimport { inertia } from '../../generators/inertia.mjs';\nimport { frameloopDriver } from './driver-frameloop.mjs';\nimport { interpolate } from '../../../utils/interpolate.mjs';\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../../utils/time-conversion.mjs';\nimport { calcGeneratorDuration } from '../../generators/utils/calc-duration.mjs';\nconst types = {\n  decay: inertia,\n  inertia,\n  tween: keyframes,\n  keyframes: keyframes,\n  spring\n};\n/**\n * Animate a single value on the main thread.\n *\n * This function is written, where functionality overlaps,\n * to be largely spec-compliant with WAAPI to allow fungibility\n * between the two.\n */\n\nfunction animateValue({\n  autoplay = true,\n  delay = 0,\n  driver = frameloopDriver,\n  keyframes: keyframes$1,\n  type = \"keyframes\",\n  repeat = 0,\n  repeatDelay = 0,\n  repeatType = \"loop\",\n  onPlay,\n  onStop,\n  onComplete,\n  onUpdate,\n  ...options\n}) {\n  let speed = 1;\n  let hasStopped = false;\n  let resolveFinishedPromise;\n  let currentFinishedPromise;\n  /**\n   * Create a new finished Promise every time we enter the\n   * finished state and resolve the old Promise. This is\n   * WAAPI-compatible behaviour.\n   */\n\n  const updateFinishedPromise = () => {\n    resolveFinishedPromise && resolveFinishedPromise();\n    currentFinishedPromise = new Promise(resolve => {\n      resolveFinishedPromise = resolve;\n    });\n  }; // Create the first finished promise\n\n\n  updateFinishedPromise();\n  let animationDriver;\n  const generatorFactory = types[type] || keyframes;\n  /**\n   * If this isn't the keyframes generator and we've been provided\n   * strings as keyframes, we need to interpolate these.\n   * TODO: Support velocity for units and complex value types/\n   */\n\n  let mapNumbersToKeyframes;\n\n  if (generatorFactory !== keyframes && typeof keyframes$1[0] !== \"number\") {\n    mapNumbersToKeyframes = interpolate([0, 100], keyframes$1, {\n      clamp: false\n    });\n    keyframes$1 = [0, 100];\n  }\n\n  const generator = generatorFactory({ ...options,\n    keyframes: keyframes$1\n  });\n  let mirroredGenerator;\n\n  if (repeatType === \"mirror\") {\n    mirroredGenerator = generatorFactory({ ...options,\n      keyframes: [...keyframes$1].reverse(),\n      velocity: -(options.velocity || 0)\n    });\n  }\n\n  let playState = \"idle\";\n  let holdTime = null;\n  let startTime = null;\n  let cancelTime = null;\n  /**\n   * If duration is undefined and we have repeat options,\n   * we need to calculate a duration from the generator.\n   *\n   * We set it to the generator itself to cache the duration.\n   * Any timeline resolver will need to have already precalculated\n   * the duration by this step.\n   */\n\n  if (generator.calculatedDuration === null && repeat) {\n    generator.calculatedDuration = calcGeneratorDuration(generator);\n  }\n\n  const {\n    calculatedDuration\n  } = generator;\n  let resolvedDuration = Infinity;\n  let totalDuration = Infinity;\n\n  if (calculatedDuration !== null) {\n    resolvedDuration = calculatedDuration + repeatDelay;\n    totalDuration = resolvedDuration * (repeat + 1) - repeatDelay;\n  }\n\n  let currentTime = 0;\n\n  const tick = timestamp => {\n    if (startTime === null) return;\n    /**\n     * requestAnimationFrame timestamps can come through as lower than\n     * the startTime as set by performance.now(). Here we prevent this,\n     * though in the future it could be possible to make setting startTime\n     * a pending operation that gets resolved here.\n     */\n\n    if (speed > 0) startTime = Math.min(startTime, timestamp);\n\n    if (holdTime !== null) {\n      currentTime = holdTime;\n    } else {\n      currentTime = (timestamp - startTime) * speed;\n    } // Rebase on delay\n\n\n    const timeWithoutDelay = currentTime - delay;\n    const isInDelayPhase = timeWithoutDelay < 0;\n    currentTime = Math.max(timeWithoutDelay, 0);\n    /**\n     * If this animation has finished, set the current time\n     * to the total duration.\n     */\n\n    if (playState === \"finished\" && holdTime === null) {\n      currentTime = totalDuration;\n    }\n\n    let elapsed = currentTime;\n    let frameGenerator = generator;\n\n    if (repeat) {\n      /**\n       * Get the current progress (0-1) of the animation. If t is >\n       * than duration we'll get values like 2.5 (midway through the\n       * third iteration)\n       */\n      const progress = currentTime / resolvedDuration;\n      /**\n       * Get the current iteration (0 indexed). For instance the floor of\n       * 2.5 is 2.\n       */\n\n      let currentIteration = Math.floor(progress);\n      /**\n       * Get the current progress of the iteration by taking the remainder\n       * so 2.5 is 0.5 through iteration 2\n       */\n\n      let iterationProgress = progress % 1.0;\n      /**\n       * If iteration progress is 1 we count that as the end\n       * of the previous iteration.\n       */\n\n      if (!iterationProgress && progress >= 1) {\n        iterationProgress = 1;\n      }\n\n      iterationProgress === 1 && currentIteration--;\n      currentIteration = Math.min(currentIteration, repeat + 1);\n      /**\n       * Reverse progress if we're not running in \"normal\" direction\n       */\n\n      const iterationIsOdd = Boolean(currentIteration % 2);\n\n      if (iterationIsOdd) {\n        if (repeatType === \"reverse\") {\n          iterationProgress = 1 - iterationProgress;\n\n          if (repeatDelay) {\n            iterationProgress -= repeatDelay / resolvedDuration;\n          }\n        } else if (repeatType === \"mirror\") {\n          frameGenerator = mirroredGenerator;\n        }\n      }\n\n      let p = clamp(0, 1, iterationProgress);\n\n      if (currentTime > totalDuration) {\n        p = repeatType === \"reverse\" && iterationIsOdd ? 1 : 0;\n      }\n\n      elapsed = p * resolvedDuration;\n    }\n    /**\n     * If we're in negative time, set state as the initial keyframe.\n     * This prevents delay: x, duration: 0 animations from finishing\n     * instantly.\n     */\n\n\n    const state = isInDelayPhase ? {\n      done: false,\n      value: keyframes$1[0]\n    } : frameGenerator.next(elapsed);\n\n    if (mapNumbersToKeyframes) {\n      state.value = mapNumbersToKeyframes(state.value);\n    }\n\n    let {\n      done\n    } = state;\n\n    if (!isInDelayPhase && calculatedDuration !== null) {\n      done = currentTime >= totalDuration;\n    }\n\n    const isAnimationFinished = holdTime === null && (playState === \"finished\" || playState === \"running\" && done || speed < 0 && currentTime <= 0);\n\n    if (onUpdate) {\n      onUpdate(state.value);\n    }\n\n    if (isAnimationFinished) {\n      finish();\n    }\n\n    return state;\n  };\n\n  const stopAnimationDriver = () => {\n    animationDriver && animationDriver.stop();\n    animationDriver = undefined;\n  };\n\n  const cancel = () => {\n    playState = \"idle\";\n    stopAnimationDriver();\n    updateFinishedPromise();\n    startTime = cancelTime = null;\n  };\n\n  const finish = () => {\n    playState = \"finished\";\n    onComplete && onComplete();\n    stopAnimationDriver();\n    updateFinishedPromise();\n  };\n\n  const play = () => {\n    if (hasStopped) return;\n    if (!animationDriver) animationDriver = driver(tick);\n    const now = animationDriver.now();\n    onPlay && onPlay();\n\n    if (holdTime !== null) {\n      startTime = now - holdTime;\n    } else if (!startTime || playState === \"finished\") {\n      startTime = now;\n    }\n\n    cancelTime = startTime;\n    holdTime = null;\n    /**\n     * Set playState to running only after we've used it in\n     * the previous logic.\n     */\n\n    playState = \"running\";\n    animationDriver.start();\n  };\n\n  if (autoplay) {\n    play();\n  }\n\n  const controls = {\n    then(resolve, reject) {\n      return currentFinishedPromise.then(resolve, reject);\n    },\n\n    get time() {\n      return millisecondsToSeconds(currentTime);\n    },\n\n    set time(newTime) {\n      newTime = secondsToMilliseconds(newTime);\n      currentTime = newTime;\n\n      if (holdTime !== null || !animationDriver || speed === 0) {\n        holdTime = newTime;\n      } else {\n        startTime = animationDriver.now() - newTime / speed;\n      }\n    },\n\n    get duration() {\n      const duration = generator.calculatedDuration === null ? calcGeneratorDuration(generator) : generator.calculatedDuration;\n      return millisecondsToSeconds(duration);\n    },\n\n    get speed() {\n      return speed;\n    },\n\n    set speed(newSpeed) {\n      if (newSpeed === speed || !animationDriver) return;\n      speed = newSpeed;\n      controls.time = millisecondsToSeconds(currentTime);\n    },\n\n    get state() {\n      return playState;\n    },\n\n    play,\n    pause: () => {\n      playState = \"paused\";\n      holdTime = currentTime;\n    },\n    stop: () => {\n      hasStopped = true;\n      if (playState === \"idle\") return;\n      playState = \"idle\";\n      onStop && onStop();\n      cancel();\n    },\n    cancel: () => {\n      if (cancelTime !== null) tick(cancelTime);\n      cancel();\n    },\n    complete: () => {\n      playState = \"finished\";\n    },\n    sample: elapsed => {\n      startTime = 0;\n      return tick(elapsed);\n    }\n  };\n  return controls;\n}\n\nexport { animateValue };","map":{"version":3,"sources":["C:/Users/HP/Desktop/pfe/node_modules/framer-motion/dist/es/animation/animators/js/index.mjs"],"names":["keyframes","spring","inertia","frameloopDriver","interpolate","clamp","millisecondsToSeconds","secondsToMilliseconds","calcGeneratorDuration","types","decay","tween","animateValue","autoplay","delay","driver","keyframes$1","type","repeat","repeatDelay","repeatType","onPlay","onStop","onComplete","onUpdate","options","speed","hasStopped","resolveFinishedPromise","currentFinishedPromise","updateFinishedPromise","Promise","resolve","animationDriver","generatorFactory","mapNumbersToKeyframes","generator","mirroredGenerator","reverse","velocity","playState","holdTime","startTime","cancelTime","calculatedDuration","resolvedDuration","Infinity","totalDuration","currentTime","tick","timestamp","Math","min","timeWithoutDelay","isInDelayPhase","max","elapsed","frameGenerator","progress","currentIteration","floor","iterationProgress","iterationIsOdd","Boolean","p","state","done","value","next","isAnimationFinished","finish","stopAnimationDriver","stop","undefined","cancel","play","now","start","controls","then","reject","time","newTime","duration","newSpeed","pause","complete","sample"],"mappings":"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","sourcesContent":["import { keyframes } from '../../generators/keyframes.mjs';\nimport { spring } from '../../generators/spring/index.mjs';\nimport { inertia } from '../../generators/inertia.mjs';\nimport { frameloopDriver } from './driver-frameloop.mjs';\nimport { interpolate } from '../../../utils/interpolate.mjs';\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../../utils/time-conversion.mjs';\nimport { calcGeneratorDuration } from '../../generators/utils/calc-duration.mjs';\n\nconst types = {\n    decay: inertia,\n    inertia,\n    tween: keyframes,\n    keyframes: keyframes,\n    spring,\n};\n/**\n * Animate a single value on the main thread.\n *\n * This function is written, where functionality overlaps,\n * to be largely spec-compliant with WAAPI to allow fungibility\n * between the two.\n */\nfunction animateValue({ autoplay = true, delay = 0, driver = frameloopDriver, keyframes: keyframes$1, type = \"keyframes\", repeat = 0, repeatDelay = 0, repeatType = \"loop\", onPlay, onStop, onComplete, onUpdate, ...options }) {\n    let speed = 1;\n    let hasStopped = false;\n    let resolveFinishedPromise;\n    let currentFinishedPromise;\n    /**\n     * Create a new finished Promise every time we enter the\n     * finished state and resolve the old Promise. This is\n     * WAAPI-compatible behaviour.\n     */\n    const updateFinishedPromise = () => {\n        resolveFinishedPromise && resolveFinishedPromise();\n        currentFinishedPromise = new Promise((resolve) => {\n            resolveFinishedPromise = resolve;\n        });\n    };\n    // Create the first finished promise\n    updateFinishedPromise();\n    let animationDriver;\n    const generatorFactory = types[type] || keyframes;\n    /**\n     * If this isn't the keyframes generator and we've been provided\n     * strings as keyframes, we need to interpolate these.\n     * TODO: Support velocity for units and complex value types/\n     */\n    let mapNumbersToKeyframes;\n    if (generatorFactory !== keyframes &&\n        typeof keyframes$1[0] !== \"number\") {\n        mapNumbersToKeyframes = interpolate([0, 100], keyframes$1, {\n            clamp: false,\n        });\n        keyframes$1 = [0, 100];\n    }\n    const generator = generatorFactory({ ...options, keyframes: keyframes$1 });\n    let mirroredGenerator;\n    if (repeatType === \"mirror\") {\n        mirroredGenerator = generatorFactory({\n            ...options,\n            keyframes: [...keyframes$1].reverse(),\n            velocity: -(options.velocity || 0),\n        });\n    }\n    let playState = \"idle\";\n    let holdTime = null;\n    let startTime = null;\n    let cancelTime = null;\n    /**\n     * If duration is undefined and we have repeat options,\n     * we need to calculate a duration from the generator.\n     *\n     * We set it to the generator itself to cache the duration.\n     * Any timeline resolver will need to have already precalculated\n     * the duration by this step.\n     */\n    if (generator.calculatedDuration === null && repeat) {\n        generator.calculatedDuration = calcGeneratorDuration(generator);\n    }\n    const { calculatedDuration } = generator;\n    let resolvedDuration = Infinity;\n    let totalDuration = Infinity;\n    if (calculatedDuration !== null) {\n        resolvedDuration = calculatedDuration + repeatDelay;\n        totalDuration = resolvedDuration * (repeat + 1) - repeatDelay;\n    }\n    let currentTime = 0;\n    const tick = (timestamp) => {\n        if (startTime === null)\n            return;\n        /**\n         * requestAnimationFrame timestamps can come through as lower than\n         * the startTime as set by performance.now(). Here we prevent this,\n         * though in the future it could be possible to make setting startTime\n         * a pending operation that gets resolved here.\n         */\n        if (speed > 0)\n            startTime = Math.min(startTime, timestamp);\n        if (holdTime !== null) {\n            currentTime = holdTime;\n        }\n        else {\n            currentTime = (timestamp - startTime) * speed;\n        }\n        // Rebase on delay\n        const timeWithoutDelay = currentTime - delay;\n        const isInDelayPhase = timeWithoutDelay < 0;\n        currentTime = Math.max(timeWithoutDelay, 0);\n        /**\n         * If this animation has finished, set the current time\n         * to the total duration.\n         */\n        if (playState === \"finished\" && holdTime === null) {\n            currentTime = totalDuration;\n        }\n        let elapsed = currentTime;\n        let frameGenerator = generator;\n        if (repeat) {\n            /**\n             * Get the current progress (0-1) of the animation. If t is >\n             * than duration we'll get values like 2.5 (midway through the\n             * third iteration)\n             */\n            const progress = currentTime / resolvedDuration;\n            /**\n             * Get the current iteration (0 indexed). For instance the floor of\n             * 2.5 is 2.\n             */\n            let currentIteration = Math.floor(progress);\n            /**\n             * Get the current progress of the iteration by taking the remainder\n             * so 2.5 is 0.5 through iteration 2\n             */\n            let iterationProgress = progress % 1.0;\n            /**\n             * If iteration progress is 1 we count that as the end\n             * of the previous iteration.\n             */\n            if (!iterationProgress && progress >= 1) {\n                iterationProgress = 1;\n            }\n            iterationProgress === 1 && currentIteration--;\n            currentIteration = Math.min(currentIteration, repeat + 1);\n            /**\n             * Reverse progress if we're not running in \"normal\" direction\n             */\n            const iterationIsOdd = Boolean(currentIteration % 2);\n            if (iterationIsOdd) {\n                if (repeatType === \"reverse\") {\n                    iterationProgress = 1 - iterationProgress;\n                    if (repeatDelay) {\n                        iterationProgress -= repeatDelay / resolvedDuration;\n                    }\n                }\n                else if (repeatType === \"mirror\") {\n                    frameGenerator = mirroredGenerator;\n                }\n            }\n            let p = clamp(0, 1, iterationProgress);\n            if (currentTime > totalDuration) {\n                p = repeatType === \"reverse\" && iterationIsOdd ? 1 : 0;\n            }\n            elapsed = p * resolvedDuration;\n        }\n        /**\n         * If we're in negative time, set state as the initial keyframe.\n         * This prevents delay: x, duration: 0 animations from finishing\n         * instantly.\n         */\n        const state = isInDelayPhase\n            ? { done: false, value: keyframes$1[0] }\n            : frameGenerator.next(elapsed);\n        if (mapNumbersToKeyframes) {\n            state.value = mapNumbersToKeyframes(state.value);\n        }\n        let { done } = state;\n        if (!isInDelayPhase && calculatedDuration !== null) {\n            done = currentTime >= totalDuration;\n        }\n        const isAnimationFinished = holdTime === null &&\n            (playState === \"finished\" ||\n                (playState === \"running\" && done) ||\n                (speed < 0 && currentTime <= 0));\n        if (onUpdate) {\n            onUpdate(state.value);\n        }\n        if (isAnimationFinished) {\n            finish();\n        }\n        return state;\n    };\n    const stopAnimationDriver = () => {\n        animationDriver && animationDriver.stop();\n        animationDriver = undefined;\n    };\n    const cancel = () => {\n        playState = \"idle\";\n        stopAnimationDriver();\n        updateFinishedPromise();\n        startTime = cancelTime = null;\n    };\n    const finish = () => {\n        playState = \"finished\";\n        onComplete && onComplete();\n        stopAnimationDriver();\n        updateFinishedPromise();\n    };\n    const play = () => {\n        if (hasStopped)\n            return;\n        if (!animationDriver)\n            animationDriver = driver(tick);\n        const now = animationDriver.now();\n        onPlay && onPlay();\n        if (holdTime !== null) {\n            startTime = now - holdTime;\n        }\n        else if (!startTime || playState === \"finished\") {\n            startTime = now;\n        }\n        cancelTime = startTime;\n        holdTime = null;\n        /**\n         * Set playState to running only after we've used it in\n         * the previous logic.\n         */\n        playState = \"running\";\n        animationDriver.start();\n    };\n    if (autoplay) {\n        play();\n    }\n    const controls = {\n        then(resolve, reject) {\n            return currentFinishedPromise.then(resolve, reject);\n        },\n        get time() {\n            return millisecondsToSeconds(currentTime);\n        },\n        set time(newTime) {\n            newTime = secondsToMilliseconds(newTime);\n            currentTime = newTime;\n            if (holdTime !== null || !animationDriver || speed === 0) {\n                holdTime = newTime;\n            }\n            else {\n                startTime = animationDriver.now() - newTime / speed;\n            }\n        },\n        get duration() {\n            const duration = generator.calculatedDuration === null\n                ? calcGeneratorDuration(generator)\n                : generator.calculatedDuration;\n            return millisecondsToSeconds(duration);\n        },\n        get speed() {\n            return speed;\n        },\n        set speed(newSpeed) {\n            if (newSpeed === speed || !animationDriver)\n                return;\n            speed = newSpeed;\n            controls.time = millisecondsToSeconds(currentTime);\n        },\n        get state() {\n            return playState;\n        },\n        play,\n        pause: () => {\n            playState = \"paused\";\n            holdTime = currentTime;\n        },\n        stop: () => {\n            hasStopped = true;\n            if (playState === \"idle\")\n                return;\n            playState = \"idle\";\n            onStop && onStop();\n            cancel();\n        },\n        cancel: () => {\n            if (cancelTime !== null)\n                tick(cancelTime);\n            cancel();\n        },\n        complete: () => {\n            playState = \"finished\";\n        },\n        sample: (elapsed) => {\n            startTime = 0;\n            return tick(elapsed);\n        },\n    };\n    return controls;\n}\n\nexport { animateValue };\n"]},"metadata":{},"sourceType":"module"}