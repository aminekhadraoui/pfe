{"ast":null,"code":"import { useInitialAnimationState } from \"./chunk-OW24QTOM.mjs\";\nimport { useCheckboxGroupContext } from \"./chunk-6XFPBTDN.mjs\";\nimport { CheckboxIcon } from \"./chunk-DFEUIRKX.mjs\";\nimport { useCheckbox } from \"./chunk-HPA3SDH4.mjs\"; // src/checkbox.tsx\n\nimport { callAll, cx } from \"@chakra-ui/shared-utils\";\nimport { chakra, forwardRef, keyframes, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { cloneElement, useMemo } from \"react\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar controlStyles = {\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  verticalAlign: \"top\",\n  userSelect: \"none\",\n  flexShrink: 0\n};\nvar rootStyles = {\n  cursor: \"pointer\",\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  verticalAlign: \"top\",\n  position: \"relative\"\n};\nvar checkAnim = keyframes({\n  from: {\n    opacity: 0,\n    strokeDashoffset: 16,\n    transform: \"scale(0.95)\"\n  },\n  to: {\n    opacity: 1,\n    strokeDashoffset: 0,\n    transform: \"scale(1)\"\n  }\n});\nvar indeterminateOpacityAnim = keyframes({\n  from: {\n    opacity: 0\n  },\n  to: {\n    opacity: 1\n  }\n});\nvar indeterminateScaleAnim = keyframes({\n  from: {\n    transform: \"scaleX(0.65)\"\n  },\n  to: {\n    transform: \"scaleX(1)\"\n  }\n});\nvar Checkbox = forwardRef(function Checkbox2(props, ref) {\n  const group = useCheckboxGroupContext();\n  const mergedProps = { ...group,\n    ...props\n  };\n  const styles = useMultiStyleConfig(\"Checkbox\", mergedProps);\n  const ownProps = omitThemingProps(props);\n  const {\n    spacing = \"0.5rem\",\n    className,\n    children,\n    iconColor,\n    iconSize,\n    icon = /* @__PURE__ */jsx(CheckboxIcon, {}),\n    isChecked: isCheckedProp,\n    isDisabled = group == null ? void 0 : group.isDisabled,\n    onChange: onChangeProp,\n    inputProps,\n    ...rest\n  } = ownProps;\n  let isChecked = isCheckedProp;\n\n  if ((group == null ? void 0 : group.value) && ownProps.value) {\n    isChecked = group.value.includes(ownProps.value);\n  }\n\n  let onChange = onChangeProp;\n\n  if ((group == null ? void 0 : group.onChange) && ownProps.value) {\n    onChange = callAll(group.onChange, onChangeProp);\n  }\n\n  const {\n    state,\n    getInputProps,\n    getCheckboxProps,\n    getLabelProps,\n    getRootProps\n  } = useCheckbox({ ...rest,\n    isDisabled,\n    isChecked,\n    onChange\n  });\n  const shouldAnimate = useInitialAnimationState(state.isChecked);\n  const iconStyles = useMemo(() => ({\n    animation: !shouldAnimate ? void 0 : state.isIndeterminate ? `${indeterminateOpacityAnim} 20ms linear, ${indeterminateScaleAnim} 200ms linear` : `${checkAnim} 200ms linear`,\n    fontSize: iconSize,\n    color: iconColor,\n    ...styles.icon\n  }), [iconColor, iconSize, shouldAnimate, state.isIndeterminate, styles.icon]);\n  const clonedIcon = cloneElement(icon, {\n    __css: iconStyles,\n    isIndeterminate: state.isIndeterminate,\n    isChecked: state.isChecked\n  });\n  return /* @__PURE__ */jsxs(chakra.label, {\n    __css: { ...rootStyles,\n      ...styles.container\n    },\n    className: cx(\"chakra-checkbox\", className),\n    ...getRootProps(),\n    children: [/* @__PURE__ */jsx(\"input\", {\n      className: \"chakra-checkbox__input\",\n      ...getInputProps(inputProps, ref)\n    }), /* @__PURE__ */jsx(chakra.span, {\n      __css: { ...controlStyles,\n        ...styles.control\n      },\n      className: \"chakra-checkbox__control\",\n      ...getCheckboxProps(),\n      children: clonedIcon\n    }), children && /* @__PURE__ */jsx(chakra.span, {\n      className: \"chakra-checkbox__label\",\n      ...getLabelProps(),\n      __css: {\n        marginStart: spacing,\n        ...styles.label\n      },\n      children\n    })]\n  });\n});\nCheckbox.displayName = \"Checkbox\";\nexport { Checkbox };","map":{"version":3,"sources":["C:/Users/HP/Desktop/pfe/node_modules/@chakra-ui/checkbox/dist/chunk-VFYM6BU6.mjs"],"names":["useInitialAnimationState","useCheckboxGroupContext","CheckboxIcon","useCheckbox","callAll","cx","chakra","forwardRef","keyframes","omitThemingProps","useMultiStyleConfig","cloneElement","useMemo","jsx","jsxs","controlStyles","display","alignItems","justifyContent","verticalAlign","userSelect","flexShrink","rootStyles","cursor","position","checkAnim","from","opacity","strokeDashoffset","transform","to","indeterminateOpacityAnim","indeterminateScaleAnim","Checkbox","Checkbox2","props","ref","group","mergedProps","styles","ownProps","spacing","className","children","iconColor","iconSize","icon","isChecked","isCheckedProp","isDisabled","onChange","onChangeProp","inputProps","rest","value","includes","state","getInputProps","getCheckboxProps","getLabelProps","getRootProps","shouldAnimate","iconStyles","animation","isIndeterminate","fontSize","color","clonedIcon","__css","label","container","span","control","marginStart","displayName"],"mappings":"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","sourcesContent":["import {\n  useInitialAnimationState\n} from \"./chunk-OW24QTOM.mjs\";\nimport {\n  useCheckboxGroupContext\n} from \"./chunk-6XFPBTDN.mjs\";\nimport {\n  CheckboxIcon\n} from \"./chunk-DFEUIRKX.mjs\";\nimport {\n  useCheckbox\n} from \"./chunk-HPA3SDH4.mjs\";\n\n// src/checkbox.tsx\nimport { callAll, cx } from \"@chakra-ui/shared-utils\";\nimport {\n  chakra,\n  forwardRef,\n  keyframes,\n  omitThemingProps,\n  useMultiStyleConfig\n} from \"@chakra-ui/system\";\nimport { cloneElement, useMemo } from \"react\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar controlStyles = {\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  verticalAlign: \"top\",\n  userSelect: \"none\",\n  flexShrink: 0\n};\nvar rootStyles = {\n  cursor: \"pointer\",\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  verticalAlign: \"top\",\n  position: \"relative\"\n};\nvar checkAnim = keyframes({\n  from: {\n    opacity: 0,\n    strokeDashoffset: 16,\n    transform: \"scale(0.95)\"\n  },\n  to: {\n    opacity: 1,\n    strokeDashoffset: 0,\n    transform: \"scale(1)\"\n  }\n});\nvar indeterminateOpacityAnim = keyframes({\n  from: {\n    opacity: 0\n  },\n  to: {\n    opacity: 1\n  }\n});\nvar indeterminateScaleAnim = keyframes({\n  from: {\n    transform: \"scaleX(0.65)\"\n  },\n  to: {\n    transform: \"scaleX(1)\"\n  }\n});\nvar Checkbox = forwardRef(function Checkbox2(props, ref) {\n  const group = useCheckboxGroupContext();\n  const mergedProps = { ...group, ...props };\n  const styles = useMultiStyleConfig(\"Checkbox\", mergedProps);\n  const ownProps = omitThemingProps(props);\n  const {\n    spacing = \"0.5rem\",\n    className,\n    children,\n    iconColor,\n    iconSize,\n    icon = /* @__PURE__ */ jsx(CheckboxIcon, {}),\n    isChecked: isCheckedProp,\n    isDisabled = group == null ? void 0 : group.isDisabled,\n    onChange: onChangeProp,\n    inputProps,\n    ...rest\n  } = ownProps;\n  let isChecked = isCheckedProp;\n  if ((group == null ? void 0 : group.value) && ownProps.value) {\n    isChecked = group.value.includes(ownProps.value);\n  }\n  let onChange = onChangeProp;\n  if ((group == null ? void 0 : group.onChange) && ownProps.value) {\n    onChange = callAll(group.onChange, onChangeProp);\n  }\n  const {\n    state,\n    getInputProps,\n    getCheckboxProps,\n    getLabelProps,\n    getRootProps\n  } = useCheckbox({\n    ...rest,\n    isDisabled,\n    isChecked,\n    onChange\n  });\n  const shouldAnimate = useInitialAnimationState(state.isChecked);\n  const iconStyles = useMemo(\n    () => ({\n      animation: !shouldAnimate ? void 0 : state.isIndeterminate ? `${indeterminateOpacityAnim} 20ms linear, ${indeterminateScaleAnim} 200ms linear` : `${checkAnim} 200ms linear`,\n      fontSize: iconSize,\n      color: iconColor,\n      ...styles.icon\n    }),\n    [iconColor, iconSize, shouldAnimate, state.isIndeterminate, styles.icon]\n  );\n  const clonedIcon = cloneElement(icon, {\n    __css: iconStyles,\n    isIndeterminate: state.isIndeterminate,\n    isChecked: state.isChecked\n  });\n  return /* @__PURE__ */ jsxs(\n    chakra.label,\n    {\n      __css: { ...rootStyles, ...styles.container },\n      className: cx(\"chakra-checkbox\", className),\n      ...getRootProps(),\n      children: [\n        /* @__PURE__ */ jsx(\n          \"input\",\n          {\n            className: \"chakra-checkbox__input\",\n            ...getInputProps(inputProps, ref)\n          }\n        ),\n        /* @__PURE__ */ jsx(\n          chakra.span,\n          {\n            __css: { ...controlStyles, ...styles.control },\n            className: \"chakra-checkbox__control\",\n            ...getCheckboxProps(),\n            children: clonedIcon\n          }\n        ),\n        children && /* @__PURE__ */ jsx(\n          chakra.span,\n          {\n            className: \"chakra-checkbox__label\",\n            ...getLabelProps(),\n            __css: {\n              marginStart: spacing,\n              ...styles.label\n            },\n            children\n          }\n        )\n      ]\n    }\n  );\n});\nCheckbox.displayName = \"Checkbox\";\n\nexport {\n  Checkbox\n};\n"]},"metadata":{},"sourceType":"module"}